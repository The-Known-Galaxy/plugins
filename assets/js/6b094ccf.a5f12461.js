"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[765],{49886:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new PluginSubModule.","params":[{"name":"config","desc":"","lua_type":"PluginSubModuleConfig"}],"returns":[{"desc":"","lua_type":"PluginSubModule\\r\\n"}],"function_type":"static","tags":["constructor"],"since":"0.1.0","source":{"line":199,"path":"src/Modules/PluginSubModule.luau"}},{"name":"OnPreLoad","desc":"Register a function that runs _before_ the submodule is about to **load**.\\nIts returnvalue\'s truthyness is used to decide if the submodule should continue to load.\\nIf it does not load, then no other lifecycle methods run.\\n\\nThis is the best place to do permission checks or other contextual checks against whether the rest of the module should run.","params":[{"name":"executor","desc":"","lua_type":"PreLoadExecutor"}],"returns":[],"function_type":"method","tags":["methods"],"since":"0.1.0","source":{"line":225,"path":"src/Modules/PluginSubModule.luau"}},{"name":"OnPostLoad","desc":"Register a function that runs _after_ the submodule has loaded.\\n\\nIt is best to do any actual initialisation code in here.\\nDeclaring buttons, context actions, mounting UIs, etc.","params":[{"name":"executor","desc":"","lua_type":"LifeCycleExecutor"}],"returns":[],"function_type":"method","tags":["methods"],"since":"0.1.0","source":{"line":237,"path":"src/Modules/PluginSubModule.luau"}},{"name":"OnActivate","desc":"Register a function that runs _after_ the submodule has been \\"activated\\".\\n[PluginSubModule.Active] will be `true` at this point in time.\\n\\nIt is best to start executing the module\'s main functionality from here, whatever it may be.\\nOpening up widget UIs, running primary processing code, etc.","params":[{"name":"executor","desc":"","lua_type":"LifeCycleExecutor"}],"returns":[],"function_type":"method","tags":["methods"],"since":"0.1.0","source":{"line":250,"path":"src/Modules/PluginSubModule.luau"}},{"name":"OnDeactivate","desc":"Register a function that runs _after_ the submodule has been \\"deactivated\\".\\n[PluginSubModule.Active] will be `false` at this point in time.\\n\\nIt is best to pause/stop executing the module\'s main functionlity from here, whatever it may be.\\nClosing widget UIs, pausing or stopping primary processing code, etc.","params":[{"name":"executor","desc":"","lua_type":"LifeCycleExecutor"}],"returns":[],"function_type":"method","tags":["methods"],"since":"0.1.0","source":{"line":263,"path":"src/Modules/PluginSubModule.luau"}},{"name":"OnPreUnload","desc":"Register a function that runs _before_ the submodule is about to **unload**.\\n\\nThis has no practical usage in most production use-cases, since this hook is only invoked when the entire plugin\'s modules are unloaded and the plugin\'s execution is stopped.\\nIn other words, whenever **you are live testing it with [Config.DevelopmentMode] turned on (hot reloading) or when the end-user deactivates the plugin from the menu**","params":[{"name":"executor","desc":"","lua_type":"LifeCycleExecutor"}],"returns":[],"function_type":"method","tags":["methods"],"since":"0.1.0","source":{"line":275,"path":"src/Modules/PluginSubModule.luau"}}],"properties":[{"name":"ButtonIcon","desc":"The asset string for the icon of the [PluginToolbarButton] that activates/deactivates this submodule. ","lua_type":"string","since":"0.1.0","readonly":true,"source":{"line":74,"path":"src/Modules/PluginSubModule.luau"}},{"name":"ActiveByDefault","desc":"Whether the submodule is turned active immediately after loading.","lua_type":"boolean","since":"0.1.0","readonly":true,"source":{"line":82,"path":"src/Modules/PluginSubModule.luau"}},{"name":"Active","desc":"Whether the plugin is currently active or not.","lua_type":"boolean","since":"0.1.0","readonly":true,"source":{"line":90,"path":"src/Modules/PluginSubModule.luau"}},{"name":"DisplayName","desc":"The display name of the submodule. Used in places like the [PluginToolbarButton] for the submodule.","lua_type":"string","since":"0.1.0","readonly":true,"source":{"line":98,"path":"src/Modules/PluginSubModule.luau"}},{"name":"Tooltip","desc":"A short description-like text for the submodule. Used in places like the [PluginToolbarButton] for the submodule.","lua_type":"string","since":"0.1.0","readonly":true,"source":{"line":106,"path":"src/Modules/PluginSubModule.luau"}},{"name":"OneClickExecution","desc":"Whether the submodule\'s button should activate and then immediately deactivate the submodule - functioning like a single-click event.\\nBoth the `Activate` and `Deactivate` hooks will fire in their respective order.\\n\\nUseful for instances like \\"hey I want this submodule to do something small every time I click it\\".\\n\\n[PluginSubModule.ActiveByDefault] means this plugin will one-shot execute its functionality immediately when the Studio starts.","lua_type":"boolean","since":"0.1.0","readonly":true,"source":{"line":119,"path":"src/Modules/PluginSubModule.luau"}},{"name":"DevelopmentModule","desc":"If true, then this submodule **only** loads when [PluginFacade.DevelopmentMode] is turned on.\\nUseful for creating submodules intended entirely for testing or plugin development purposes.","lua_type":"boolean","since":"0.1.0","readonly":true,"source":{"line":128,"path":"src/Modules/PluginSubModule.luau"}},{"name":"UID","desc":"A unique identifier for the submodule, meant for internal use.","lua_type":"string","since":"0.1.0","readonly":true,"source":{"line":136,"path":"src/Modules/PluginSubModule.luau"}}],"types":[{"name":"LifeCycleExecutor","desc":"Executor function that is hooked into any of the life cycle events.\\nAccess to the [PluginFacade] instance is provided to support whatever custom behaviour is desired.","lua_type":"(pluginFacade: PluginFacade) -> boolean?","source":{"line":54,"path":"src/Modules/PluginSubModule.luau"}},{"name":"PreLoadExecutor","desc":"Executor function that is hooked specifically into the PreLoad life cycle.\\nCan optionally return a `string` explaining _why_ the module failed to load.\\nAccess to the [PluginFacade] instance is provided to support whatever custom behaviour is desired.","lua_type":"(pluginFacade: PluginFacade) -> (boolean, string?)","source":{"line":64,"path":"src/Modules/PluginSubModule.luau"}},{"name":"PluginSubModuleConfig","desc":"Supplied to the constructor to overwrite default module parameters.","fields":[{"name":"ButtonIcon","lua_type":"string?","desc":""},{"name":"ActiveByDefault","lua_type":"boolean?","desc":""},{"name":"DisplayName","lua_type":"string?","desc":""},{"name":"Tooltip","lua_type":"string?","desc":""},{"name":"OneClickExecution:","lua_type":"boolean?","desc":""}],"source":{"line":164,"path":"src/Modules/PluginSubModule.luau"}}],"name":"PluginSubModule","desc":"Every tool, submodule, and sub-plugin must be one of these.\\nAll custom behaviour is put into this.\\nThese are then loaded, activated, deactivated and unloaded (in other words, entirely managed) by [SubModuleManager].\\n\\nIntended use is something like this:\\n```lua\\nlocal StudioService = game:GetService(\\"StudioService\\")\\nlocal PluginSubModule = require(script.path.to.PluginSubModule)\\n\\nlocal newSubModule = PluginSubModule.new({\\n    ButtonIcon = \\"rbxassetid://123\\",\\n    ActiveByDefault = true,\\n})\\n\\nnewSubModule:OnPreLoad(function(_pluginFacade: PluginFacade.PluginFacade)\\n    -- only person with user id 456 can use this module!\\n    return StudioService:GetUserId() == 456\\nend)\\n\\nnewSubModule:OnActivate(function(_pluginFacade: PluginFacade.PluginFacade)\\n    print(\\"I\'m a plugin that logs a random number to console!\\")\\n    print(math.random(1, 10))\\nend)\\n\\nreturn newSubModule\\n```","source":{"line":32,"path":"src/Modules/PluginSubModule.luau"}}')}}]);