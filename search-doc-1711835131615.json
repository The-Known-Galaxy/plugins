[{"title":"GroupIds","type":0,"sectionRef":"#","url":"/plugins/api/GroupIds","content":"On this page GroupIds This file contains all the group IDs that we would ever need to use.","keywords":""},{"title":"RankData","type":0,"sectionRef":"#","url":"/plugins/api/RankData","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#types","content":" "},{"title":"GroupRanks​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#GroupRanks","content":"&lt;/&gt; type GroupRanks = {[string]: number}  "},{"title":"Properties​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#properties","content":" "},{"title":"TESTERS​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#TESTERS","content":"&lt;/&gt; RankData.TESTERS: GroupRanks Beta tester group.  "},{"title":"TKG​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#TKG","content":"&lt;/&gt; RankData.TKG: GroupRanks Main Genre group.  "},{"title":"KRE​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#KRE","content":"&lt;/&gt; RankData.KRE: GroupRanks Robing group. Used to be called Kai's Robe Emporium, but is now called Outer Rim Outfitting &amp; Supply  "},{"title":"JEDI​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#JEDI","content":"&lt;/&gt; RankData.JEDI: GroupRanks Main Jedi group.  "},{"title":"COREC​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#COREC","content":"&lt;/&gt; RankData.COREC: GroupRanks Council of Reconciliation.  "},{"title":"COREA​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#COREA","content":"&lt;/&gt; RankData.COREA: GroupRanks Council of Reassignment.  "},{"title":"COFK​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#COFK","content":"&lt;/&gt; RankData.COFK: GroupRanks Council of First Knowledge.  "},{"title":"TSF​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#TSF","content":"&lt;/&gt; RankData.TSF: GroupRanks Temple Security Force.  "},{"title":"JSC​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#JSC","content":"&lt;/&gt; RankData.JSC: GroupRanks Jedi Service Corps.  "},{"title":"JA​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#JA","content":"&lt;/&gt; RankData.JA: GroupRanks Jedi Academy.  "},{"title":"TG​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#TG","content":"&lt;/&gt; RankData.TG: GroupRanks Temple Guard.  "},{"title":"JAT​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#JAT","content":"&lt;/&gt; RankData.JAT: GroupRanks Jedi Assault Team.  "},{"title":"LA​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#LA","content":"&lt;/&gt; RankData.LA: GroupRanks Librarian's Assembly.  "},{"title":"SITH​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#SITH","content":"&lt;/&gt; RankData.SITH: GroupRanks Main Sith group.  "},{"title":"DHG​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#DHG","content":"&lt;/&gt; RankData.DHG: GroupRanks Dark Honor Guards.  "},{"title":"SA​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#SA","content":"&lt;/&gt; RankData.SA: GroupRanks Sith Academy.  "},{"title":"SOAK​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#SOAK","content":"&lt;/&gt; RankData.SOAK: GroupRanks Sphere of Ancient Knowledge.  "},{"title":"SOED​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#SOED","content":"&lt;/&gt; RankData.SOED: GroupRanks Sphere of Expansion &amp; Diplomacy.  "},{"title":"SOLJ​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#SOLJ","content":"&lt;/&gt; RankData.SOLJ: GroupRanks Sphere of Laws &amp; Justice.  "},{"title":"SOSP​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#SOSP","content":"&lt;/&gt; RankData.SOSP: GroupRanks Sphere of Sith Philosophy.  "},{"title":"SOM​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#SOM","content":"&lt;/&gt; RankData.SOM: GroupRanks Sphere of Mysteries.  "},{"title":"SODS​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#SODS","content":"&lt;/&gt; RankData.SODS: GroupRanks Sphere of Defense &amp; Security.  "},{"title":"SOT​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#SOT","content":"&lt;/&gt; RankData.SOT: GroupRanks Sphere of Technology.  "},{"title":"PATHWAY​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#PATHWAY","content":"&lt;/&gt; RankData.PATHWAY: {[&quot;JEDI&quot; | &quot;SITH&quot;]: {[number]: true}} Pathways. "},{"title":"Development Rules","type":0,"sectionRef":"#","url":"/plugins/docs/Guides/development-rules","content":"Development Rules If you are developing tools for the plugin, then when writing code, you must adhere to the following rules for things to work properly: Whenever require-ing any modules, ensure that the requires are absolute, otherwise PluginFacade.HotReloadPlugin() not work (for that file anyway).","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"/plugins/docs/intro","content":"","keywords":""},{"title":"Running the Project​","type":1,"pageTitle":"Introduction","url":"/plugins/docs/intro#running-the-project","content":"Basically everything you could need to do is achieved through a Lune Module. There are 2 ways to run it: Run source .commands.sh to get a terminal function setup that runs the module with the alias plugins. E.g.: &gt; source .commands.sh &gt; plugins  Just run lune run main every time you want to use. The above is faster for repeat usages. This one is faster for one off usages. E.g.: &gt; lune run main  Inside there are self-explanatory interactive options for: Running unit testsRunning static analysisBuilding the Studio testing place and the plugin itself (optionally to your local Studio plugin folder on your computer).Automatically uploading any images the plugin uses to ROBLOX.Deploying the plugin to the Roblox Marketplace. "},{"title":"Development Workflow​","type":1,"pageTitle":"Introduction","url":"/plugins/docs/intro#development-workflow","content":"Once you have started the studio (achieved by running start build/place.rbxl) and you are ready to work, go through the following steps: Start the doc-site (if you haven't already) with docsite from source .commands.sh.Ensure Config.DevelopmentMode is turned on inside src/Config.luau so that you get hot reloading, which ensures you don't have to constantly rebuild the Studio or manually save the files as a local plugin to see changes.Start the rojo service with rojo serve place.project.json and connect to it from Studio. "},{"title":"Creating New Modules​","type":1,"pageTitle":"Introduction","url":"/plugins/docs/intro#creating-new-modules","content":"Now that you have your development environment setup and the plugin hot-reloading, you're ready to create a new module! New modules are stored inside src/PluginModules as files with the name YourSubModule.module.luau. That .module suffix is especially important since that's how the system detects that file as a possible submodule that it should try to load. Once inside, use this snippet to create all the boilerplate for the new submodule: &quot;Plugin SubModule&quot;: { &quot;prefix&quot;: [ &quot;pluginsubmodule&quot;, &quot;plugin&quot;, &quot;submodule&quot; ], &quot;body&quot;: [ &quot;--!strict&quot;, &quot;local PluginSubModule = require(script.Parent.Parent.Modules.PluginSubModule)&quot;, &quot;local PluginFacade = require(script.Parent.Parent.PluginFacade)&quot;, &quot;&quot;, &quot;local ${TM_FILENAME_BASE/.module//g} = PluginSubModule.new({&quot;, &quot;\\tButtonIcon = nil,&quot;, &quot;\\tDisplayName = \\&quot;Name\\&quot;,&quot;, &quot;\\tTooltip = \\&quot;Tooltip\\&quot;,&quot;, &quot;\\tActiveByDefault = false,&quot;, &quot;\\tOneClickExecution = false,&quot;, &quot;\\tDevelopmentModule = false,&quot;, &quot;})&quot;, &quot;&quot;, &quot;${TM_FILENAME_BASE/.module//g}:OnPreLoad(function(_pluginFacade: PluginFacade.PluginFacade)&quot;, &quot;\\treturn true&quot;, &quot;end)&quot;, &quot;&quot;, &quot;${TM_FILENAME_BASE/.module//g}:OnPostLoad(function(_pluginFacade: PluginFacade.PluginFacade)&quot;, &quot;\\treturn true&quot;, &quot;end)&quot;, &quot;&quot;, &quot;${TM_FILENAME_BASE/.module//g}:OnActivate(function(_pluginFacade: PluginFacade.PluginFacade)&quot;, &quot;\\treturn true&quot;, &quot;end)&quot;, &quot;&quot;, &quot;${TM_FILENAME_BASE/.module//g}:OnDeactivate(function(_pluginFacade: PluginFacade.PluginFacade)&quot;, &quot;\\treturn true&quot;, &quot;end)&quot;, &quot;&quot;, &quot;${TM_FILENAME_BASE/.module//g}:OnPreUnload(function(_pluginFacade: PluginFacade.PluginFacade)&quot;, &quot;\\treturn true&quot;, &quot;end)&quot;, &quot;&quot;, &quot;return ${TM_FILENAME_BASE/.module//g}&quot;, ], },  When working, make sure you pay attention to Development Rules. Thanks for working towards making the lives of TKG developers just that little bit better... plugins Creator and Architect, ShadowEngineer "},{"title":"Permissions","type":0,"sectionRef":"#","url":"/plugins/api/Permissions","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Permissions","url":"/plugins/api/Permissions#functions","content":" "},{"title":"CanUsePlugin​","type":1,"pageTitle":"Permissions","url":"/plugins/api/Permissions#CanUsePlugin","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Permissions.CanUsePlugin() → boolean Whether the currently logged in Studio user can user this plugin. "},{"title":"NextId","type":0,"sectionRef":"#","url":"/plugins/api/NextId","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"NextId","url":"/plugins/api/NextId#functions","content":" "},{"title":"New​","type":1,"pageTitle":"NextId","url":"/plugins/api/NextId#New","content":"&lt;/&gt; NextId.New() → () → number Returns a callback that can be used to freely create a new, unique identification number by invoking it. local nextUniqueId = NextId.New() print(nextUniqueId()) --&gt; 1 print(nextUniqueId()) --&gt; 2 print(nextUniqueId()) --&gt; 3  "},{"title":"Logger","type":0,"sectionRef":"#","url":"/plugins/api/Logger","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Logger","url":"/plugins/api/Logger#functions","content":" "},{"title":"Print​","type":1,"pageTitle":"Logger","url":"/plugins/api/Logger#Print","content":"&lt;/&gt; Logger.Print(text: string) → () Prints text to output. Nothing special.  "},{"title":"Warn​","type":1,"pageTitle":"Logger","url":"/plugins/api/Logger#Warn","content":"&lt;/&gt; Logger.Warn(text: string) → () Prints the given text as a yellow warning to output. "},{"title":"Loader","type":0,"sectionRef":"#","url":"/plugins/api/Loader","content":"On this page Loader Primary plugin execution entry point. Runs the rest of the plugin. Originally taken from Tag Editor Loader by Kampfkarren. Kampfkarren: Thank you Tiffany352!!! Then taken from Hoarcekat Loader. ShadowEngineer: Thank you Kampfkarren!","keywords":""},{"title":"DummyPluginModule","type":0,"sectionRef":"#","url":"/plugins/api/DummyPluginModule","content":"On this page DummyPluginModule Test module for testing PluginSubModule implementation.","keywords":""},{"title":"Config","type":0,"sectionRef":"#","url":"/plugins/api/Config","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Config","url":"/plugins/api/Config#properties","content":" "},{"title":"DevelopmentMode​","type":1,"pageTitle":"Config","url":"/plugins/api/Config#DevelopmentMode","content":"&lt;/&gt; Config.DevelopmentMode: boolean Change to true to enable hot reloading support. You must rebuild the plugin and the place for this to take effect. Opening a place containing the code synced via Rojo will cause the plugin to be reloaded in edit mode. (No need for play solo or the hotswap plugin.)  "},{"title":"Version​","type":1,"pageTitle":"Config","url":"/plugins/api/Config#Version","content":"&lt;/&gt; Config.Version: string Plugin version.  "},{"title":"Name.Long​","type":1,"pageTitle":"Config","url":"/plugins/api/Config#Name.Long","content":"&lt;/&gt; Config.Name.Long: string Long name of the plugin. Meant for displaying nicely like a title.  "},{"title":"Name.Short​","type":1,"pageTitle":"Config","url":"/plugins/api/Config#Name.Short","content":"&lt;/&gt; Config.Name.Short: string Short name of the plugin. Meant for abbrevations or shorthand referencing.  "},{"title":"Name.PluginRoot​","type":1,"pageTitle":"Config","url":"/plugins/api/Config#Name.PluginRoot","content":"&lt;/&gt; Config.Name.PluginRoot: &quot;TKGSuite&quot; Name of the top-level instance all the Plugin files are stored in. warning SHOULD NOT BE CHANGED BETWEEN VERSIONS!  "},{"title":"MainIcon​","type":1,"pageTitle":"Config","url":"/plugins/api/Config#MainIcon","content":"&lt;/&gt; Config.MainIcon: string Primary icon asset string for the plugin. "},{"title":"PluginSubModule","type":0,"sectionRef":"#","url":"/plugins/api/PluginSubModule","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#types","content":" "},{"title":"LifeCycleExecutor​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#LifeCycleExecutor","content":"&lt;/&gt; type LifeCycleExecutor = (pluginFacade: PluginFacade) → boolean? Executor function that is hooked into any of the life cycle events. Access to the PluginFacade instance is provided to support whatever custom behaviour is desired.  "},{"title":"PreLoadExecutor​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#PreLoadExecutor","content":"&lt;/&gt; type PreLoadExecutor = (pluginFacade: PluginFacade) → ( boolean, string? ) Executor function that is hooked specifically into the PreLoad life cycle. Can optionally return a string explaining why the module failed to load. Access to the PluginFacade instance is provided to support whatever custom behaviour is desired.  "},{"title":"PluginSubModuleConfig​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#PluginSubModuleConfig","content":"&lt;/&gt; interface PluginSubModuleConfig { ButtonIcon: string? ActiveByDefault: boolean? DisplayName: string? Tooltip: string? OneClickExecution:: boolean? } Supplied to the constructor to overwrite default module parameters. "},{"title":"Properties​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#properties","content":" "},{"title":"ButtonIcon​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#ButtonIcon","content":"This item is read only and cannot be modified. Read Only since 0.1.0 &lt;/&gt; PluginSubModule.ButtonIcon: string The asset string for the icon of the PluginToolbarButton that activates/deactivates this submodule.  "},{"title":"ActiveByDefault​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#ActiveByDefault","content":"This item is read only and cannot be modified. Read Only since 0.1.0 &lt;/&gt; PluginSubModule.ActiveByDefault: boolean Whether the submodule is turned active immediately after loading.  "},{"title":"Active​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#Active","content":"This item is read only and cannot be modified. Read Only since 0.1.0 &lt;/&gt; PluginSubModule.Active: boolean Whether the plugin is currently active or not.  "},{"title":"DisplayName​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#DisplayName","content":"This item is read only and cannot be modified. Read Only since 0.1.0 &lt;/&gt; PluginSubModule.DisplayName: string The display name of the submodule. Used in places like the PluginToolbarButton for the submodule.  "},{"title":"Tooltip​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#Tooltip","content":"This item is read only and cannot be modified. Read Only since 0.1.0 &lt;/&gt; PluginSubModule.Tooltip: string A short description-like text for the submodule. Used in places like the PluginToolbarButton for the submodule.  "},{"title":"OneClickExecution​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#OneClickExecution","content":"This item is read only and cannot be modified. Read Only since 0.1.0 &lt;/&gt; PluginSubModule.OneClickExecution: boolean Whether the submodule's button should activate and then immediately deactivate the submodule - functioning like a single-click event. Both the Activate and Deactivate hooks will fire in their respective order. Useful for instances like &quot;hey I want this submodule to do something small every time I click it&quot;. PluginSubModule.ActiveByDefault means this plugin will one-shot execute its functionality immediately when the Studio starts.  "},{"title":"DevelopmentModule​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#DevelopmentModule","content":"This item is read only and cannot be modified. Read Only since 0.1.0 &lt;/&gt; PluginSubModule.DevelopmentModule: boolean If true, then this submodule only loads when PluginFacade.DevelopmentMode is turned on. Useful for creating submodules intended entirely for testing or plugin development purposes.  "},{"title":"UID​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#UID","content":"This item is read only and cannot be modified. Read Only since 0.1.0 &lt;/&gt; PluginSubModule.UID: string A unique identifier for the submodule, meant for internal use. "},{"title":"Functions​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#functions","content":" "},{"title":"new​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#new","content":"constructor since 0.1.0 &lt;/&gt; PluginSubModule.new(config: PluginSubModuleConfig) → PluginSubModule Creates a new PluginSubModule.  "},{"title":"OnPreLoad​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#OnPreLoad","content":"methods since 0.1.0 &lt;/&gt; PluginSubModule:OnPreLoad(executor: PreLoadExecutor) → () Register a function that runs before the submodule is about to load. Its returnvalue's truthyness is used to decide if the submodule should continue to load. If it does not load, then no other lifecycle methods run. This is the best place to do permission checks or other contextual checks against whether the rest of the module should run.  "},{"title":"OnPostLoad​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#OnPostLoad","content":"methods since 0.1.0 &lt;/&gt; PluginSubModule:OnPostLoad(executor: LifeCycleExecutor) → () Register a function that runs after the submodule has loaded. It is best to do any actual initialisation code in here. Declaring buttons, context actions, mounting UIs, etc.  "},{"title":"OnActivate​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#OnActivate","content":"methods since 0.1.0 &lt;/&gt; PluginSubModule:OnActivate(executor: LifeCycleExecutor) → () Register a function that runs after the submodule has been &quot;activated&quot;. PluginSubModule.Active will be true at this point in time. It is best to start executing the module's main functionality from here, whatever it may be. Opening up widget UIs, running primary processing code, etc.  "},{"title":"OnDeactivate​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#OnDeactivate","content":"methods since 0.1.0 &lt;/&gt; PluginSubModule:OnDeactivate(executor: LifeCycleExecutor) → () Register a function that runs after the submodule has been &quot;deactivated&quot;. PluginSubModule.Active will be false at this point in time. It is best to pause/stop executing the module's main functionlity from here, whatever it may be. Closing widget UIs, pausing or stopping primary processing code, etc.  "},{"title":"OnPreUnload​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#OnPreUnload","content":"methods since 0.1.0 &lt;/&gt; PluginSubModule:OnPreUnload(executor: LifeCycleExecutor) → () Register a function that runs before the submodule is about to unload. This has no practical usage in most production use-cases, since this hook is only invoked when the entire plugin's modules are unloaded and the plugin's execution is stopped. In other words, whenever you are live testing it with Config.DevelopmentMode turned on (hot reloading) or when the end-user deactivates the plugin from the menu "},{"title":"SubModuleManager","type":0,"sectionRef":"#","url":"/plugins/api/SubModuleManager","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#types","content":" "},{"title":"ModuleScriptCollection​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#ModuleScriptCollection","content":"&lt;/&gt; type ModuleScriptCollection = {ModuleScript } Simply an array of ModuleScript objects.  "},{"title":"SubModuleCollection​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#SubModuleCollection","content":"&lt;/&gt; type SubModuleCollection = {PluginSubModule} Simply an array of PluginSubModules.  "},{"title":"LoadSuccess​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#LoadSuccess","content":"&lt;/&gt; interface LoadSuccess { Ok: true-- Whether the load was successful. ModuleScript: ModuleScript -- The module instance that was loaded. Module: PluginSubModule-- The returned module after a successful load. } An object representing a successful module load.  "},{"title":"LoadFailure​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#LoadFailure","content":"&lt;/&gt; interface LoadFailure { Ok: false-- Whether the load was successful. ModuleScript: ModuleScript -- The module instance that was loaded. FailureReason: string-- A description of why the load failed. } An object representing an unsuccessful module load.  "},{"title":"LoadResult​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#LoadResult","content":"&lt;/&gt; type LoadResult = LoadSuccess | LoadFailure Indicating a generic load result - could be a success or a failure.  "},{"title":"ManagedModule​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#ManagedModule","content":"&lt;/&gt; interface ManagedModule { Module: PluginSubModule-- The submodule that is being managed. ShouldLoad: boolean-- A flag indicating whether the module should and has actually been loaded. NotLoadingReason: string?-- A written explanation that is outputted whenever the submodule is invoked, but it is not loaded. ToolbarButton: PluginToolbarButton -- The button associated with this submodule. } This is an common interfacing data structure that holds all relevant management and loading data about a given submodule. It is very useful to pass around the various management methods since each of its data are needed in their own contexts. "},{"title":"Functions​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#functions","content":" "},{"title":"new​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#new","content":"constructor since 0.1.0 &lt;/&gt; SubModuleManager.new(facade: PluginFacade.PluginFacade) → SubModuleManager Constructs a new SubModuleManager.  "},{"title":"ValidPluginSubModule​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#ValidPluginSubModule","content":"utility since 0.1.0 &lt;/&gt; SubModuleManager.ValidPluginSubModule(instance: Instance ) → boolean Validates whether an instance is likely a valid PluginSubModule. Does not require it if it is one though.  "},{"title":"CollectModules​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#CollectModules","content":"methods since 0.1.0 &lt;/&gt; SubModuleManager:CollectModules(root: Instance ) → ModuleScriptCollection Finds all ModuleScripts that could potentially return a PluginSubModule and requires them. A module identifiable by the manager is one where the name has .module at the end of it.  "},{"title":"LoadModules​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#LoadModules","content":"methods since 0.1.0 &lt;/&gt; SubModuleManager:LoadModules(moduleCollection: ModuleScriptCollection) → Promise&lt;{LoadResult}&gt;-- A promise resolving with an array of module invocation results. Loads all the module scripts inside the collection, validating them. Uses Promises internally.  "},{"title":"RunLifeCycles​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#RunLifeCycles","content":"methods since 0.1.0 &lt;/&gt; SubModuleManager:RunLifeCycles( pluginSubModules: SubModuleCollection, toolbarName: string ) → () Runs all life cycle hooks on plugin sub-modules. Creates activation buttons for all submodules too, in a toolbar with the given name.  "},{"title":"UnloadAllModules​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#UnloadAllModules","content":"methods since 0.1.0 &lt;/&gt; SubModuleManager:UnloadAllModules() → () Declares all managed modules that this manager knows about as unloaded, and calls necessary life cycle hooks on them. This should be done only once.  "},{"title":"InvokeLifeCycleHookIfExists​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#InvokeLifeCycleHookIfExists","content":"methods since 0.1.0 &lt;/&gt; SubModuleManager:InvokeLifeCycleHookIfExists( managedModule: ManagedModule, executorName: string ) → () Invokes a given life cycle executor hook on a managed module.  "},{"title":"ToggleModuleActivation​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#ToggleModuleActivation","content":"methods since 0.1.0 &lt;/&gt; SubModuleManager:ToggleModuleActivation( managedModule: ManagedModule, forcedState: boolean? ) → () Toggles a PluginSubModule.Active status whilst also validating if someone can, and calls the necessary life cycle hooks. Optionally can also force a module's activation. "},{"title":"PluginFacade","type":0,"sectionRef":"#","url":"/plugins/api/PluginFacade","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#types","content":" "},{"title":"SavedState​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#SavedState","content":"&lt;/&gt; type SavedState = any   "},{"title":"PluginFacade​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#PluginFacade","content":"&lt;/&gt; interface PluginFacade { DevelopmentMode: boolean PluginObject: Plugin CurrentRoot: Instance }  "},{"title":"Properties​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#properties","content":" "},{"title":"DevelopmentMode​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#DevelopmentMode","content":"This item is read only and cannot be modified. Read Only since 0.1.0 &lt;/&gt; PluginFacade.DevelopmentMode: boolean Whether the plugin's execution is currently in &quot;developer mode&quot;. Can be used as a flag for having debug-specific features turned on. Also a proxy for whether Hot-Reloading is turned on.  "},{"title":"PluginObject​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#PluginObject","content":"This item is read only and cannot be modified. Read Only since 0.1.0 &lt;/&gt; PluginFacade.PluginObject: Plugin  Reference to the running plugin instance, from which native ROBLOX calls can be made. Since the Plugin instance is only accessible from the top-level execution Script that ROBLOX Studio executes the plugin with, a reference to it is stored in here for when native Plugin interfaces are required in other files.  "},{"title":"CurrentRoot​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#CurrentRoot","content":"This item is read only and cannot be modified. Read Only since 0.1.0 &lt;/&gt; PluginFacade.CurrentRoot: Instance  A reference to the top-level root of the plugin, wherever it might be. ALL REQUIRES SHOULD BE DIRECTED FROM HERE "},{"title":"Functions​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#functions","content":" "},{"title":"Setup​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#Setup","content":"methods constructor since 0.1.0 &lt;/&gt; PluginFacade.Setup( self: PluginFacade, settings: PluginFacadeSetupSettings ) → () "},{"title":"Types","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade##","content":""},{"title":"​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#PluginFacadeSetupSettings","content":"interface PluginFacadeSetupSettings { DevelopmentMode: boolean-- Whether to turn on development mode. currentRoot: Instance -- The root Instance where the plugin is stored in. source: Instance -- The root Instance from which the module &quot;clones&quot; itself for hot-reloading. pluginReference: Plugin -- A reference to the Plugin object available in the plugin calling script. }  Sets up the PluginFacade module. Although not a traditional &quot;constructor&quot; that most Object Classes have in OOP, it sets up the rest of the module. warning Call this before any other methods! Otherwise, undefined or erroneous behaviour might occur.  "},{"title":"CreateToolbar​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#CreateToolbar","content":"methods since 0.1.0 &lt;/&gt; PluginFacade.CreateToolbar( self: PluginFacade, name: string ) → PluginToolbar  Abstraction for Plugin:CreateToolbar  "},{"title":"CreateButton​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#CreateButton","content":"methods since 0.1.0 &lt;/&gt; PluginFacade.CreateButton( self: PluginFacade, toolbar: PluginToolbar , name: string, tooltip: string, icon: string, text: string? ) → PluginToolbarButton  Abstraction for PluginToolbar:CreateButton  "},{"title":"CreateDockWidgetPluginGui​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#CreateDockWidgetPluginGui","content":"methods since 0.1.0 &lt;/&gt; PluginFacade.CreateDockWidgetPluginGui( self: PluginFacade, name: string, info: DockWidgetPluginGuiInfo ) → DockWidgetPluginGui  Wrapper around Plugin:CreateDockWidgetPluginGui  "},{"title":"GetMouse​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#GetMouse","content":"methods since 0.1.0 &lt;/&gt; PluginFacade.GetMouse(self: PluginFacade) → PluginMouse  Wrapper around Plugin:GetMouse.  "},{"title":"RegisterPreUnloadHook​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#RegisterPreUnloadHook","content":"methods since 0.1.0 &lt;/&gt; PluginFacade.RegisterPreUnloadHook( self: PluginFacade, callback: (...any) → ...any ) → () Sets the method to call the next time the plugin tries to hot-reload.  "},{"title":"LoadPlugin​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#LoadPlugin","content":"methods since 0.1.0 &lt;/&gt; PluginFacade.LoadPlugin( self: PluginFacade, savedState: SavedState ) → () Loads the entire plugin. warning Will fail to run if root.Plugin.Main is not a ModuleScript that returns a function.  "},{"title":"UnloadPlugin​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#UnloadPlugin","content":"methods since 0.1.0 &lt;/&gt; PluginFacade.UnloadPlugin(self: PluginFacade) → SavedState? Unloads the entire plugin.  "},{"title":"HotReloadPlugin​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#HotReloadPlugin","content":"methods since 0.1.0 &lt;/&gt; PluginFacade.HotReloadPlugin(self: PluginFacade) → () Reloads the entire plugin. Used in hot-reloading.  "},{"title":"WatchInstanceForChanges​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#WatchInstanceForChanges","content":"methods since 0.1.0 &lt;/&gt; PluginFacade.WatchInstanceForChanges( self: PluginFacade, instance: Instance ) → () Watch for changes to the given instance and its children, and then hot-reload the entire plugin to reflect those changes. note Recursive. Should be called on the root instance once, and it'll watch all descendant instances. "}]