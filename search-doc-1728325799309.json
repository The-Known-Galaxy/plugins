[{"title":"ComponentVisualiser","type":0,"sectionRef":"#","url":"/plugins/api/ComponentVisualiser","content":"On this page ComponentVisualiser Provides functionality to visualise components. Currently only WorldRegions which are NamedAreas.","keywords":""},{"title":"ArchiveValidator","type":0,"sectionRef":"#","url":"/plugins/api/ArchiveValidator","content":"On this page ArchiveValidator Validates the contents of the archives when they are selected.","keywords":""},{"title":"Colour","type":0,"sectionRef":"#","url":"/plugins/api/Colour","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Colour","url":"/plugins/api/Colour#functions","content":" "},{"title":"Inverse​","type":1,"pageTitle":"Colour","url":"/plugins/api/Colour#Inverse","content":"since v0.3.0 &lt;/&gt; Colour.Inverse(colour: Color3 ) → Color3  Inverts a colour - useful for turning light to dark. Achieves this by inverting the R, G and B values of the colour - this achieves the effect of essentially &quot;moving that colour to the opposite end of the colour wheel&quot;. Blue turns orange, green turns purple, red turns yellow, etc. "},{"title":"ButtonMask","type":0,"sectionRef":"#","url":"/plugins/api/ButtonMask","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"ButtonMask","url":"/plugins/api/ButtonMask#types","content":" "},{"title":"Props​","type":1,"pageTitle":"ButtonMask","url":"/plugins/api/ButtonMask#Props","content":"&lt;/&gt; interface Props { onActivate: () → () onHoverIn: () → () onHoverOut: () → () native: {[string]: any}? children: any? }  "},{"title":"GroupIds","type":0,"sectionRef":"#","url":"/plugins/api/GroupIds","content":"On this page GroupIds This file contains all the group IDs that we would ever need to use.","keywords":""},{"title":"HiltSetProcessor","type":0,"sectionRef":"#","url":"/plugins/api/HiltSetProcessor","content":"On this page HiltSetProcessor Provides functionality to import new lightsaber hilts into the game, as well as other utility functions. Heavy lifting done by ImportHilt.","keywords":""},{"title":"DummyPluginModule","type":0,"sectionRef":"#","url":"/plugins/api/DummyPluginModule","content":"On this page DummyPluginModule This item is only intended to be used by the module's authors. Private Test module for testing PluginSubModule implementation.","keywords":""},{"title":"ConfigureHilt","type":0,"sectionRef":"#","url":"/plugins/api/ConfigureHilt","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ConfigureHilt","url":"/plugins/api/ConfigureHilt#functions","content":" "},{"title":"ConfigureSelectionByActionId​","type":1,"pageTitle":"ConfigureHilt","url":"/plugins/api/ConfigureHilt#ConfigureSelectionByActionId","content":"since v0.3.0 &lt;/&gt; ConfigureHilt.ConfigureSelectionByActionId( selection: {Instance }, pluginActionId: string ) → () Takes in a specific action ID, and compares them against known IDs from Config.ActionAndMenuId. If a valid configuration function is found, performs that function on the entire set of selected objects.  "},{"title":"FilterSelectionForConfigurableHiltParts​","type":1,"pageTitle":"ConfigureHilt","url":"/plugins/api/ConfigureHilt#FilterSelectionForConfigurableHiltParts","content":"utility since v0.3.0 &lt;/&gt; ConfigureHilt.FilterSelectionForConfigurableHiltParts(selection: {Instance }) → {BasePart } Filters a given selection for only the parts that can be configured (their attributes changed).  "},{"title":"IsConfigurableHiltPart​","type":1,"pageTitle":"ConfigureHilt","url":"/plugins/api/ConfigureHilt#IsConfigurableHiltPart","content":"utility since v0.3.0 &lt;/&gt; ConfigureHilt.IsConfigurableHiltPart(part: Instance ) → boolean Checks whether a given instance is a BasePart and if it's inside an already imported lightsaber hilt model. This is a pre-requisite for doing any part-level hilt configuration. "},{"title":"HiltMaterials","type":0,"sectionRef":"#","url":"/plugins/api/HiltMaterials","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"HiltMaterials","url":"/plugins/api/HiltMaterials#types","content":" "},{"title":"Material​","type":1,"pageTitle":"HiltMaterials","url":"/plugins/api/HiltMaterials#Material","content":"&lt;/&gt; interface Material { name: string color: Color3 material: Enum.Material price: number? collectible: boolean? }  "},{"title":"HiltValidations","type":0,"sectionRef":"#","url":"/plugins/api/HiltValidations","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"HiltValidations","url":"/plugins/api/HiltValidations#types","content":" "},{"title":"ValidationRule​","type":1,"pageTitle":"HiltValidations","url":"/plugins/api/HiltValidations#ValidationRule","content":"&lt;/&gt; interface ValidationRule { name: string-- the name of the rule validatorFn: (hilt: Model ) → ( boolean, string? )-- a function that validates if a given hilt follows the rule, returning a flag and an error message if it isn't valid suggestionTip: string-- a generic suggestion message that could direct someone in the right direction if the validation isn't met subRules: ((hilt: Model ) → ValidationRules)?-- on successful validation, this function can return a list of new rules to validate - rules that DEPEND on this one succeeding }   "},{"title":"ValidationRules​","type":1,"pageTitle":"HiltValidations","url":"/plugins/api/HiltValidations#ValidationRules","content":"&lt;/&gt; type ValidationRules = {ValidationRule} A list of validation rules. "},{"title":"Properties​","type":1,"pageTitle":"HiltValidations","url":"/plugins/api/HiltValidations#properties","content":" "},{"title":"ValidationRules​","type":1,"pageTitle":"HiltValidations","url":"/plugins/api/HiltValidations#ValidationRules","content":"since v0.3.0 &lt;/&gt; HiltValidations.ValidationRules: ValidationRules The top-level validation rules that all validations start from. Sub-rules are contained in each rule. "},{"title":"Config","type":0,"sectionRef":"#","url":"/plugins/api/Config","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Config","url":"/plugins/api/Config#properties","content":" "},{"title":"DevelopmentMode​","type":1,"pageTitle":"Config","url":"/plugins/api/Config#DevelopmentMode","content":"&lt;/&gt; Config.DevelopmentMode: boolean Change to true to enable hot reloading support. You must rebuild the plugin and the place for this to take effect. Opening a place containing the code synced via Rojo will cause the plugin to be reloaded in edit mode. (No need for play solo or the hotswap plugin.)  "},{"title":"Version​","type":1,"pageTitle":"Config","url":"/plugins/api/Config#Version","content":"&lt;/&gt; Config.Version: string Plugin version.  "},{"title":"Name.Long​","type":1,"pageTitle":"Config","url":"/plugins/api/Config#Name.Long","content":"&lt;/&gt; Config.Name.Long: string Long name of the plugin. Meant for displaying nicely like a title.  "},{"title":"Name.Short​","type":1,"pageTitle":"Config","url":"/plugins/api/Config#Name.Short","content":"&lt;/&gt; Config.Name.Short: string Short name of the plugin. Meant for abbrevations or shorthand referencing.  "},{"title":"Name.PluginRoot​","type":1,"pageTitle":"Config","url":"/plugins/api/Config#Name.PluginRoot","content":"&lt;/&gt; Config.Name.PluginRoot: &quot;TKGSuite&quot; Name of the top-level instance all the Plugin files are stored in. warning SHOULD NOT BE CHANGED BETWEEN VERSIONS!  "},{"title":"MainIcon​","type":1,"pageTitle":"Config","url":"/plugins/api/Config#MainIcon","content":"&lt;/&gt; Config.MainIcon: string Primary icon asset string for the plugin.  "},{"title":"ActionAndMenuId​","type":1,"pageTitle":"Config","url":"/plugins/api/Config#ActionAndMenuId","content":"since v0.3.0 &lt;/&gt; Config.ActionAndMenuId: {[string]: string} A dictionary of IDs that are supposed to be shared plugin-wide, corresponding to the IDs for PluginAction objects and PluginMenu objects. Since these are supposed to be constant, they should never be changed. They are also hence managed from here - the entire plugin needs access to these. "},{"title":"Loader","type":0,"sectionRef":"#","url":"/plugins/api/Loader","content":"On this page Loader Primary plugin execution entry point. Runs the rest of the plugin. Originally taken from Tag Editor Loader by Kampfkarren. Kampfkarren: Thank you Tiffany352!!! Then taken from Hoarcekat Loader. ShadowEngineer: Thank you Kampfkarren!","keywords":""},{"title":"InterfaceConfig","type":0,"sectionRef":"#","url":"/plugins/api/InterfaceConfig","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"InterfaceConfig","url":"/plugins/api/InterfaceConfig#types","content":" "},{"title":"ColourPalette​","type":1,"pageTitle":"InterfaceConfig","url":"/plugins/api/InterfaceConfig#ColourPalette","content":"&lt;/&gt; interface ColourPalette { Primary: Color3, -- should be a bright vibrant colour Secondary: Color3, -- a different colour to primary. Should be a good contrast Tertiary: Color3, -- used rarely. Can be anything Accent: Color3, -- should be very bright, almost white-ish Text: Color3, -- should be very dark } Describes a general colour palette, used when specifying various plugin UI themes. "},{"title":"Logger","type":0,"sectionRef":"#","url":"/plugins/api/Logger","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Logger","url":"/plugins/api/Logger#functions","content":" "},{"title":"Format​","type":1,"pageTitle":"Logger","url":"/plugins/api/Logger#Format","content":"since v0.2.0 &lt;/&gt; Logger.Format(text: string) → string Formats a given text with the desired logging format of this plugin framework.  "},{"title":"Print​","type":1,"pageTitle":"Logger","url":"/plugins/api/Logger#Print","content":"since v0.1.0 &lt;/&gt; Logger.Print(text: string) → ...any Prints text to output. Nothing special.  "},{"title":"Warn​","type":1,"pageTitle":"Logger","url":"/plugins/api/Logger#Warn","content":"since v0.1.0 &lt;/&gt; Logger.Warn(text: string) → ...any Prints the given text as a yellow warning to output.  "},{"title":"Error​","type":1,"pageTitle":"Logger","url":"/plugins/api/Logger#Error","content":"since v0.1.0 &lt;/&gt; Logger.Error(text: string) → () Logs the text as an error, but also actually errors. "},{"title":"Errors","type":1,"pageTitle":"Logger","url":"/plugins/api/Logger##","content":"Type\tDescriptionstring\t "},{"title":"Button","type":0,"sectionRef":"#","url":"/plugins/api/Button","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Button","url":"/plugins/api/Button#types","content":" "},{"title":"Callback​","type":1,"pageTitle":"Button","url":"/plugins/api/Button#Callback","content":"&lt;/&gt; type Callback = () → () Generic callback function.  "},{"title":"Props​","type":1,"pageTitle":"Button","url":"/plugins/api/Button#Props","content":"&lt;/&gt; interface Props { style: &quot;Solid&quot; | &quot;Outline&quot; | &quot;Text&quot; kind: &quot;Primary&quot; | &quot;Secondary&quot; active: boolean?-- whether the button is active. onActivate: Callback?-- fires when the button is pressed with LMB onHoverIn: Callback?-- fires when the user enters hover on the button onHoverOut: Callback?-- fires when the user exits hover on the button text: string?-- the text to display when the button is active disabledText: string?-- the text to display when the button is NOT active image: string?-- image asset URL. If supplied, an image is shown instead of text native: {[string]: any}? children: any? }  "},{"title":"Padding","type":0,"sectionRef":"#","url":"/plugins/api/Padding","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Padding","url":"/plugins/api/Padding#types","content":" "},{"title":"Props​","type":1,"pageTitle":"Padding","url":"/plugins/api/Padding#Props","content":"&lt;/&gt; interface Props { all: UDim? -- overrides all directions horizontal: UDim? -- overrides both left and right vertical: UDim? -- overrides both top and bottom bottom: UDim? left: UDim? right: UDim? top: UDim? native: {[string]: any}? children: any? }  "},{"title":"HiltValidator","type":0,"sectionRef":"#","url":"/plugins/api/HiltValidator","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"HiltValidator","url":"/plugins/api/HiltValidator#types","content":" "},{"title":"SelectionValidation​","type":1,"pageTitle":"HiltValidator","url":"/plugins/api/HiltValidator#SelectionValidation","content":"&lt;/&gt; interface SelectionValidation { allSuccessful: boolean-- whether all the hilts are valid validHilts: number-- the number of valid hilts invalidHilts: number-- the number of invalid hilts resultsPerInstance: SelectionValidationResults-- a list of validation results per hilt that has been validated } Top-level instance, describing a validation run against a whole selection of models.  "},{"title":"SelectionValidationResults​","type":1,"pageTitle":"HiltValidator","url":"/plugins/api/HiltValidator#SelectionValidationResults","content":"&lt;/&gt; type SelectionValidationResults = {ValidationResultForInstance} A list of validation results for each instance in a selection.  "},{"title":"ValidationResultForInstance​","type":1,"pageTitle":"HiltValidator","url":"/plugins/api/HiltValidator#ValidationResultForInstance","content":"&lt;/&gt; interface ValidationResultForInstance { model: Model -- the specific hilt model that has been validated evaluation: HiltValidation-- the list of results for all the validations ran against this instance } A set of validaation results, tied to a specific instance that the validations were run on.  "},{"title":"HiltValidation​","type":1,"pageTitle":"HiltValidator","url":"/plugins/api/HiltValidator#HiltValidation","content":"&lt;/&gt; interface HiltValidation { isValidHilt: boolean-- whether the hilt is valid validationsSuccessful: number-- the number of successful validations validationsUnsuccessful: number-- the number of unsuccessful validations results: ValidationResults-- the list of validations ran and their results } Validation results for a specific model, describing all the validations ran and whether the model is a valid hilt.  "},{"title":"ValidationResults​","type":1,"pageTitle":"HiltValidator","url":"/plugins/api/HiltValidator#ValidationResults","content":"&lt;/&gt; type ValidationResults = {ValidationResult} A list of validation results.  "},{"title":"ValidationResult​","type":1,"pageTitle":"HiltValidator","url":"/plugins/api/HiltValidator#ValidationResult","content":"&lt;/&gt; interface ValidationResult { validationName: string-- the name of the validation success: boolean-- whether it was successful, and the validation passed message: string-- a message, either describing the problem that occurred from the validation failing, or saying it passed } A description of a singular validation run, and its outcome. "},{"title":"Functions​","type":1,"pageTitle":"HiltValidator","url":"/plugins/api/HiltValidator#functions","content":" "},{"title":"RunValidationsOnSelection​","type":1,"pageTitle":"HiltValidator","url":"/plugins/api/HiltValidator#RunValidationsOnSelection","content":"since v0.3.0 &lt;/&gt; HiltValidator.RunValidationsOnSelection(selection: {Model }) → SelectionValidation Runs a validations on a selection of potential hilt Models. Assumes every instance in the selection is a model. Returns an object that describes the results of running all validations against all models in the selection.  "},{"title":"RunValidations​","type":1,"pageTitle":"HiltValidator","url":"/plugins/api/HiltValidator#RunValidations","content":"since v0.3.0 &lt;/&gt; HiltValidator.RunValidations(potentialHilt: Model ) → ValidationResults Runs all the existing validations against a potential hilt, which is a Model instance. Returns an array of validation results - each object describing the outcome of the validation against that model. Since some validations depend on the success of others, it recursively parses the validation tree until there are no more validations to run.  "},{"title":"EvaluateValidationResults​","type":1,"pageTitle":"HiltValidator","url":"/plugins/api/HiltValidator#EvaluateValidationResults","content":"since v0.3.0 &lt;/&gt; HiltValidator.EvaluateValidationResults(results: ValidationResults) → HiltValidation Evaluates all the validation results for one specific model, deciding whether the model is a valid hilt, and returning the number of successful and unsuccessful validations.  "},{"title":"OutputSelectionValidation​","type":1,"pageTitle":"HiltValidator","url":"/plugins/api/HiltValidator#OutputSelectionValidation","content":"utility since v0.3.0 &lt;/&gt; HiltValidator.OutputSelectionValidation(selectionValidation: SelectionValidation) → () Outputs all an entire selection validation result to the output in a nice format. "},{"title":"Panel","type":0,"sectionRef":"#","url":"/plugins/api/Panel","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Panel","url":"/plugins/api/Panel#types","content":" "},{"title":"Props​","type":1,"pageTitle":"Panel","url":"/plugins/api/Panel#Props","content":"&lt;/&gt; interface Props { autoSize: boolean?-- whether the text lable should resize in either axis autoSizeDirection: Enum.FillDirection?-- which axis to resize on if autoSize is true native: {[string]: any}? children: any? }  "},{"title":"NextId","type":0,"sectionRef":"#","url":"/plugins/api/NextId","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"NextId","url":"/plugins/api/NextId#functions","content":" "},{"title":"New​","type":1,"pageTitle":"NextId","url":"/plugins/api/NextId#New","content":"&lt;/&gt; NextId.New() → () → number Returns a callback that can be used to freely create a new, unique identification number by invoking it. local nextUniqueId = NextId.New() print(nextUniqueId()) --&gt; 1 print(nextUniqueId()) --&gt; 2 print(nextUniqueId()) --&gt; 3  "},{"title":"ImportHilt","type":0,"sectionRef":"#","url":"/plugins/api/ImportHilt","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ImportHilt","url":"/plugins/api/ImportHilt#functions","content":" "},{"title":"Import​","type":1,"pageTitle":"ImportHilt","url":"/plugins/api/ImportHilt#Import","content":"since v0.1.0 &lt;/&gt; ImportHilt.Import(selection: {Instance }) → () Main executor function. Also the return-value of this module. Processes all objects in the selection, validates them as something you can import, and then turns it into a new model. Achieves this by checking each child part in the original mesh selection against a selection of key words that imply what section it belongs to. New model form: Model: lightsaber_name Model: lightsaber_name Model: emitter Model: details { BasePart } BasePart: root Model: grip Model: details { BasePart } BasePart: root Model: pommel Model: details { BasePart } BasePart: root Model: switch Model: details { BasePart } BasePart: root Model: lightsaber_name_double_grip Model: details Model: lightsaber_name_staff Model: details Expects an Instance of the form: Model: Lightsaber Name { BasePart }   "},{"title":"FilterSelectionAndImport​","type":1,"pageTitle":"ImportHilt","url":"/plugins/api/ImportHilt#FilterSelectionAndImport","content":"since v0.3.0 &lt;/&gt; ImportHilt.FilterSelectionAndImport(selection: {Instance }) → () Filters a selection for importable models, and then imports them.  "},{"title":"IsImportableModel​","type":1,"pageTitle":"ImportHilt","url":"/plugins/api/ImportHilt#IsImportableModel","content":"utility since v0.3.0 &lt;/&gt; ImportHilt.IsImportableModel(instance: Instance ) → boolean Checks whether a given model is an importable one by checking its contents.  "},{"title":"IsInsideImportedModel​","type":1,"pageTitle":"ImportHilt","url":"/plugins/api/ImportHilt#IsInsideImportedModel","content":"utility since v0.3.0 &lt;/&gt; ImportHilt.IsInsideImportedModel(recursiveInstance: Instance ) → boolean Checks whether a given instance is inside of an already imported hilt model, recursively.  "},{"title":"IsImportedLightsaberModel​","type":1,"pageTitle":"ImportHilt","url":"/plugins/api/ImportHilt#IsImportedLightsaberModel","content":"utility since v0.3.0 &lt;/&gt; ImportHilt.IsImportedLightsaberModel(instance: Instance ) → ( boolean, string? ) Checks whether a given model is a fully imported lightsaber model (or its double-grip variant). Returns a message indicating why it isn't, if it isn't.  "},{"title":"HasDoubleName​","type":1,"pageTitle":"ImportHilt","url":"/plugins/api/ImportHilt#HasDoubleName","content":"utility since v0.3.1 &lt;/&gt; ImportHilt.HasDoubleName(instance: Instance ) → boolean Checks whether a model is named like a double hilt.  "},{"title":"HasStaffName​","type":1,"pageTitle":"ImportHilt","url":"/plugins/api/ImportHilt#HasStaffName","content":"utility since v0.3.1 &lt;/&gt; ImportHilt.HasStaffName(instance: Instance ) → boolean Checks whether a model is named like a double hilt.  "},{"title":"IsSingleImportedHilt​","type":1,"pageTitle":"ImportHilt","url":"/plugins/api/ImportHilt#IsSingleImportedHilt","content":"utility since v0.3.0 &lt;/&gt; ImportHilt.IsSingleImportedHilt(instance: Instance ) → ( boolean, string? ) Checks whether a given instance is a valid single lightsaber hilt. Returns a message indicating why it isn't, if it isn't.  "},{"title":"IsDoubleImportedHiltSection​","type":1,"pageTitle":"ImportHilt","url":"/plugins/api/ImportHilt#IsDoubleImportedHiltSection","content":"utility since v0.3.0 &lt;/&gt; ImportHilt.IsDoubleImportedHiltSection(instance: Instance ) → ( boolean, string? ) Checks whether a given instance is a valid double lightsaber hilt section. Returns a message indicating why it isn't, if it isn't.  "},{"title":"IsStaffImportedHiltSection​","type":1,"pageTitle":"ImportHilt","url":"/plugins/api/ImportHilt#IsStaffImportedHiltSection","content":"utility since v0.3.1 &lt;/&gt; ImportHilt.IsStaffImportedHiltSection(instance: Instance ) → ( boolean, string? ) Checks whether a given instance is a valid double lightsaber hilt section. Returns a message indicating why it isn't, if it isn't.  "},{"title":"IsImportedLightsaberSection​","type":1,"pageTitle":"ImportHilt","url":"/plugins/api/ImportHilt#IsImportedLightsaberSection","content":"utility since v0.3.0 &lt;/&gt; ImportHilt.IsImportedLightsaberSection(instance: Instance ) → ( boolean, string? ) Checks whether a given instance is a valid lightsaber hilt section (emitter, grip, etc) Returns a message indicating why it isn't, if it isn't.  "},{"title":"FilterSelectionForImportableModels​","type":1,"pageTitle":"ImportHilt","url":"/plugins/api/ImportHilt#FilterSelectionForImportableModels","content":"utility since v0.3.0 &lt;/&gt; ImportHilt.FilterSelectionForImportableModels(selection: {Instance }) → {Instance } Filters an array of Instances for only the ones that can be imported by the module.  "},{"title":"FilterSelectionForImportedModels​","type":1,"pageTitle":"ImportHilt","url":"/plugins/api/ImportHilt#FilterSelectionForImportedModels","content":"utility since v0.3.0 &lt;/&gt; ImportHilt.FilterSelectionForImportedModels(selection: {Instance }) → {Instance } Filters an array of Instances for only the ones that are already imported. "},{"title":"MaterialManager","type":0,"sectionRef":"#","url":"/plugins/api/MaterialManager","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"MaterialManager","url":"/plugins/api/MaterialManager#functions","content":" "},{"title":"ApplyHiltMaterialToParts​","type":1,"pageTitle":"MaterialManager","url":"/plugins/api/MaterialManager#ApplyHiltMaterialToParts","content":"since v0.3.0 &lt;/&gt; MaterialManager.ApplyHiltMaterialToParts( parts: {Instance } | Instance , materialName: string?, animate: boolean ) → () Applies a material with the given name (must be its immutable internal name) to the given BasePart and its descendants, or a list of BaseParts and their descendants. Optionally, animates this transition for extra visual flair, smoothly.  "},{"title":"ModelHasMaterialPreview​","type":1,"pageTitle":"MaterialManager","url":"/plugins/api/MaterialManager#ModelHasMaterialPreview","content":"utility since v0.3.0 &lt;/&gt; MaterialManager.ModelHasMaterialPreview(instance: Model ) → boolean Checks whether a given model has a material preview applied.  "},{"title":"ModelHasMaterialPreviewSpecific​","type":1,"pageTitle":"MaterialManager","url":"/plugins/api/MaterialManager#ModelHasMaterialPreviewSpecific","content":"utility since v0.3.0 &lt;/&gt; MaterialManager.ModelHasMaterialPreviewSpecific( instance: Model , materialName: string ) → () Checks whether a given model has a material preview of a specific material applied.  "},{"title":"ToggleMaterialPreview​","type":1,"pageTitle":"MaterialManager","url":"/plugins/api/MaterialManager#ToggleMaterialPreview","content":"since v0.3.0 &lt;/&gt; MaterialManager.ToggleMaterialPreview( instance: Model , materialName: string, makeChangeHistoryLog: boolean? ) → () Toggles the material preview of a given model. Assumes the given model is a valid, imported lightsaber hilt. Refer to ImportHilt.IsImportedLightsaberModel for a way to check this condition. Creates a change history log (so that you can undo the operation), unless explicitly specified not to.  "},{"title":"ToggleMaterialPreviewForSelection​","type":1,"pageTitle":"MaterialManager","url":"/plugins/api/MaterialManager#ToggleMaterialPreviewForSelection","content":"since v0.3.0 &lt;/&gt; MaterialManager.ToggleMaterialPreviewForSelection( selection: {Instance }, materialName: string ) → () Bulk toggles the material preview for a selection of models. Creates a change history log, so that you can undo this operation. "},{"title":"Permissions","type":0,"sectionRef":"#","url":"/plugins/api/Permissions","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Permissions","url":"/plugins/api/Permissions#properties","content":" "},{"title":"AccessLevels​","type":1,"pageTitle":"Permissions","url":"/plugins/api/Permissions#AccessLevels","content":"&lt;/&gt; Permissions.AccessLevels: {[string]: AccessLevel} All the access levels of a the plugin knows about. "},{"title":"Functions​","type":1,"pageTitle":"Permissions","url":"/plugins/api/Permissions#functions","content":" "},{"title":"CanUsePlugin​","type":1,"pageTitle":"Permissions","url":"/plugins/api/Permissions#CanUsePlugin","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields since v0.1.0 &lt;/&gt; Permissions.CanUsePlugin() → boolean Whether the currently logged in Studio user can user this plugin.  "},{"title":"GetAccessLevel​","type":1,"pageTitle":"Permissions","url":"/plugins/api/Permissions#GetAccessLevel","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields since v0.3.0 &lt;/&gt; Permissions.GetAccessLevel() → AccessLevel "},{"title":"Types","type":1,"pageTitle":"Permissions","url":"/plugins/api/Permissions##","content":""},{"title":"​","type":1,"pageTitle":"Permissions","url":"/plugins/api/Permissions#AccessLevel","content":"interface AccessLevel { Name: string Level: number Theme: ColourPalette IsAtLevel: (UserGroups) → boolean }  Gets the access level of the currently logged in Studio user. "},{"title":"NamedAreaVisualiser","type":0,"sectionRef":"#","url":"/plugins/api/NamedAreaVisualiser","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"NamedAreaVisualiser","url":"/plugins/api/NamedAreaVisualiser#types","content":" "},{"title":"VisualsEnabled​","type":1,"pageTitle":"NamedAreaVisualiser","url":"/plugins/api/NamedAreaVisualiser#VisualsEnabled","content":"&lt;/&gt; type VisualsEnabled = boolean | &quot;partial&quot; A type representing the visualisation state of a given part, named area, or the entire map. "},{"title":"Functions​","type":1,"pageTitle":"NamedAreaVisualiser","url":"/plugins/api/NamedAreaVisualiser#functions","content":" "},{"title":"GetValidNamedAreas​","type":1,"pageTitle":"NamedAreaVisualiser","url":"/plugins/api/NamedAreaVisualiser#GetValidNamedAreas","content":"utility since v0.4.0 &lt;/&gt; NamedAreaVisualiser.GetValidNamedAreas() → {Model } Utility for getting all valid NamedArea objects. Checks if they are valid WorldRegions too.  "},{"title":"GetBasePartDescendants​","type":1,"pageTitle":"NamedAreaVisualiser","url":"/plugins/api/NamedAreaVisualiser#GetBasePartDescendants","content":"utility since v0.4.0 &lt;/&gt; NamedAreaVisualiser.GetBasePartDescendants(instance: Instance ) → {BasePart } Utility for getting all the BasePart descendants of a given instance.  "},{"title":"VisualsEnabledOnPart​","type":1,"pageTitle":"NamedAreaVisualiser","url":"/plugins/api/NamedAreaVisualiser#VisualsEnabledOnPart","content":"since v0.4.0 &lt;/&gt; NamedAreaVisualiser.VisualsEnabledOnPart(part: BasePart ) → VisualsEnabled Whether visualisations are fully, partially or not at all toggled on a given part.  "},{"title":"VisualsEnabledOnNamedArea​","type":1,"pageTitle":"NamedAreaVisualiser","url":"/plugins/api/NamedAreaVisualiser#VisualsEnabledOnNamedArea","content":"since v0.4.0 &lt;/&gt; NamedAreaVisualiser.VisualsEnabledOnNamedArea(namedArea: Model ) → VisualsEnabled Whether visualisations are fully, partially or not at all toggled on a given Named Area.  "},{"title":"AreVisualsEnabled​","type":1,"pageTitle":"NamedAreaVisualiser","url":"/plugins/api/NamedAreaVisualiser#AreVisualsEnabled","content":"since v0.4.0 &lt;/&gt; NamedAreaVisualiser.AreVisualsEnabled() → VisualsEnabled Whether visualisations are fully, partially or not at all toggled on all the existing NamedAreas.  "},{"title":"ToggleVisuals​","type":1,"pageTitle":"NamedAreaVisualiser","url":"/plugins/api/NamedAreaVisualiser#ToggleVisuals","content":"since v0.4.0 &lt;/&gt; NamedAreaVisualiser.ToggleVisuals(shouldVisualise: boolean) → () Toggles visualisations on all named areas.  "},{"title":"ToggleOnNamedArea​","type":1,"pageTitle":"NamedAreaVisualiser","url":"/plugins/api/NamedAreaVisualiser#ToggleOnNamedArea","content":"since v0.4.0 &lt;/&gt; NamedAreaVisualiser.ToggleOnNamedArea( object: Model , shouldVisualise: boolean ) → () Toggles visualisations on a given named area, altering Locked, Color and Transparency properties as needed. "},{"title":"PluginWidgetFrame","type":0,"sectionRef":"#","url":"/plugins/api/PluginWidgetFrame","content":"On this page PluginWidgetFrame If a plugin wishes to develop a user interface inside a DockWidgetPluginGui, then this frame should be the top-level element. Provides a small navbar at the top with universal information.","keywords":""},{"title":"TextFormat","type":0,"sectionRef":"#","url":"/plugins/api/TextFormat","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"TextFormat","url":"/plugins/api/TextFormat#functions","content":" "},{"title":"Bold​","type":1,"pageTitle":"TextFormat","url":"/plugins/api/TextFormat#Bold","content":"&lt;/&gt; TextFormat.Bold(text: string) → string Turns text bold.  "},{"title":"Italics​","type":1,"pageTitle":"TextFormat","url":"/plugins/api/TextFormat#Italics","content":"&lt;/&gt; TextFormat.Italics(text: string) → string Turns text italics.  "},{"title":"Hyperlink​","type":1,"pageTitle":"TextFormat","url":"/plugins/api/TextFormat#Hyperlink","content":"&lt;/&gt; TextFormat.Hyperlink(text: string) → string Turns text into a hyperlink like this GitHub link. "},{"title":"ScrollingList","type":0,"sectionRef":"#","url":"/plugins/api/ScrollingList","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"ScrollingList","url":"/plugins/api/ScrollingList#types","content":" "},{"title":"Props​","type":1,"pageTitle":"ScrollingList","url":"/plugins/api/ScrollingList#Props","content":"&lt;/&gt; interface Props { elements: {[any]: any}-- the dictionary of React Nodes to give it for rendering inside the list. Should ideally have stable keys listPadding: UDim -- the padding between each list element startPadding: UDim? -- the padding at the start of the list, useful if certain elements go outside their root size endPadding: UDim? -- the padding at the end of the list, useful for the same reason as startPadding leftPadding: UDim? -- the padding to the left of the list rightPadding: UDim? -- the padding to the right of the list canvasIgnoresScrollBar: boolean?-- whether the canvas size should not react to the scrollbar size changing listSortOrder: Enum.SortOrder?-- how the list should sort its elements. Custom ordering is not yet supported scrollDirection: Enum.FillDirection?-- which direction the list should flow in. FillDirection is used since it's semantic to write and doesn't support XY scrolling native: {[string]: any}? children: any? } It should be noted that all padding props should only use the offset value. Undefined behaviour will occur when the UDim.Scale property is used. "},{"title":"Text","type":0,"sectionRef":"#","url":"/plugins/api/Text","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Text","url":"/plugins/api/Text#types","content":" "},{"title":"Style​","type":1,"pageTitle":"Text","url":"/plugins/api/Text#Style","content":"&lt;/&gt; type Style = &quot;normal&quot; | &quot;title&quot; | &quot;subtitle&quot; | &quot;code&quot;   "},{"title":"Props​","type":1,"pageTitle":"Text","url":"/plugins/api/Text#Props","content":"&lt;/&gt; interface Props { style: Style?-- configures font styling italics: boolean?-- to format as italics bold: boolean?-- to format as bold text: string?-- the actual text to display itself colour: Color3? -- an override for the text colour. Should be used only when needed autoSize: boolean?-- whether the text lable should resize in either axis autoSizeDirection: Enum.FillDirection?-- which axis to resize on if autoSize is true native: {[string]: any}? children: any? }  "},{"title":"RankData","type":0,"sectionRef":"#","url":"/plugins/api/RankData","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#types","content":" "},{"title":"GroupRanks​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#GroupRanks","content":"&lt;/&gt; type GroupRanks = {[string]: number}  "},{"title":"Properties​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#properties","content":" "},{"title":"TESTERS​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#TESTERS","content":"&lt;/&gt; RankData.TESTERS: GroupRanks Beta tester group.  "},{"title":"TKG​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#TKG","content":"&lt;/&gt; RankData.TKG: GroupRanks Main Genre group.  "},{"title":"KRE​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#KRE","content":"&lt;/&gt; RankData.KRE: GroupRanks Robing group. Used to be called Kai's Robe Emporium, but is now called Outer Rim Outfitting &amp; Supply  "},{"title":"JEDI​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#JEDI","content":"&lt;/&gt; RankData.JEDI: GroupRanks Main Jedi group.  "},{"title":"COREC​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#COREC","content":"&lt;/&gt; RankData.COREC: GroupRanks Council of Reconciliation.  "},{"title":"COREA​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#COREA","content":"&lt;/&gt; RankData.COREA: GroupRanks Council of Reassignment.  "},{"title":"COFK​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#COFK","content":"&lt;/&gt; RankData.COFK: GroupRanks Council of First Knowledge.  "},{"title":"TSF​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#TSF","content":"&lt;/&gt; RankData.TSF: GroupRanks Temple Security Force.  "},{"title":"JSC​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#JSC","content":"&lt;/&gt; RankData.JSC: GroupRanks Jedi Service Corps.  "},{"title":"JA​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#JA","content":"&lt;/&gt; RankData.JA: GroupRanks Jedi Academy.  "},{"title":"TG​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#TG","content":"&lt;/&gt; RankData.TG: GroupRanks Temple Guard.  "},{"title":"JAT​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#JAT","content":"&lt;/&gt; RankData.JAT: GroupRanks Jedi Assault Team.  "},{"title":"LA​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#LA","content":"&lt;/&gt; RankData.LA: GroupRanks Librarian's Assembly.  "},{"title":"SITH​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#SITH","content":"&lt;/&gt; RankData.SITH: GroupRanks Main Sith group.  "},{"title":"DHG​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#DHG","content":"&lt;/&gt; RankData.DHG: GroupRanks Dark Honor Guards.  "},{"title":"SA​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#SA","content":"&lt;/&gt; RankData.SA: GroupRanks Sith Academy.  "},{"title":"SOAK​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#SOAK","content":"&lt;/&gt; RankData.SOAK: GroupRanks Sphere of Ancient Knowledge.  "},{"title":"SOED​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#SOED","content":"&lt;/&gt; RankData.SOED: GroupRanks Sphere of Expansion &amp; Diplomacy.  "},{"title":"SOLJ​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#SOLJ","content":"&lt;/&gt; RankData.SOLJ: GroupRanks Sphere of Laws &amp; Justice.  "},{"title":"SOSP​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#SOSP","content":"&lt;/&gt; RankData.SOSP: GroupRanks Sphere of Sith Philosophy.  "},{"title":"SOM​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#SOM","content":"&lt;/&gt; RankData.SOM: GroupRanks Sphere of Mysteries.  "},{"title":"SODS​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#SODS","content":"&lt;/&gt; RankData.SODS: GroupRanks Sphere of Defense &amp; Security.  "},{"title":"SOT​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#SOT","content":"&lt;/&gt; RankData.SOT: GroupRanks Sphere of Technology.  "},{"title":"PATHWAY​","type":1,"pageTitle":"RankData","url":"/plugins/api/RankData#PATHWAY","content":"&lt;/&gt; RankData.PATHWAY: {[&quot;JEDI&quot; | &quot;SITH&quot;]: {[number]: true}} Pathways. "},{"title":"VisualiseHilt","type":0,"sectionRef":"#","url":"/plugins/api/VisualiseHilt","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"VisualiseHilt","url":"/plugins/api/VisualiseHilt#functions","content":" "},{"title":"VisualiseRootsInSelection​","type":1,"pageTitle":"VisualiseHilt","url":"/plugins/api/VisualiseHilt#VisualiseRootsInSelection","content":"since v0.3.0 &lt;/&gt; VisualiseHilt.VisualiseRootsInSelection(selection: {Model }) → () Visualises all the roots of the models in the selection of models.  "},{"title":"VisualiseRoots​","type":1,"pageTitle":"VisualiseHilt","url":"/plugins/api/VisualiseHilt#VisualiseRoots","content":"since v0.3.0 &lt;/&gt; VisualiseHilt.VisualiseRoots(model: Model ) → () Visualises the roots of a given lightsaber. Helpful in debugging how the player might end up holding the lightsaber. Assumes the given model is a well-formed lightsaber model.  "},{"title":"VisualisationsExist​","type":1,"pageTitle":"VisualiseHilt","url":"/plugins/api/VisualiseHilt#VisualisationsExist","content":"since v0.3.0 &lt;/&gt; VisualiseHilt.VisualisationsExist() → boolean Checks whether any visualisations currently exist in the studio.  "},{"title":"ClearAllVisualisations​","type":1,"pageTitle":"VisualiseHilt","url":"/plugins/api/VisualiseHilt#ClearAllVisualisations","content":"since v0.3.0 &lt;/&gt; VisualiseHilt.ClearAllVisualisations() → () Clears all visualisations that exist. Assumes visualisations exist. Whether they exist can be checked with VisualiseHilt.VisualisationsExist. "},{"title":"PluginSubModule","type":0,"sectionRef":"#","url":"/plugins/api/PluginSubModule","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#types","content":" "},{"title":"LifeCycleExecutor​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#LifeCycleExecutor","content":"&lt;/&gt; type LifeCycleExecutor = ( pluginFacade: PluginFacade, manager: SubModuleManager ) → boolean? Executor function that is hooked into any of the life cycle events. Access to the PluginFacade instance is provided to support whatever custom behaviour is desired.  "},{"title":"PreLoadExecutor​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#PreLoadExecutor","content":"&lt;/&gt; type PreLoadExecutor = (pluginFacade: PluginFacade) → ( boolean, string? ) Executor function that is hooked specifically into the PreLoad life cycle. Can optionally return a string explaining why the module failed to load. Access to the PluginFacade instance is provided to support whatever custom behaviour is desired.  "},{"title":"PluginSubModuleConfig​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#PluginSubModuleConfig","content":"&lt;/&gt; interface PluginSubModuleConfig { ButtonIcon: string? ActiveByDefault: boolean? DisplayName: string? Tooltip: string? OneClickExecution:: boolean? } Supplied to the constructor to overwrite default module parameters. "},{"title":"Properties​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#properties","content":" "},{"title":"ButtonIcon​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#ButtonIcon","content":"This item is read only and cannot be modified. Read Only since v0.1.0 &lt;/&gt; PluginSubModule.ButtonIcon: string The asset string for the icon of the PluginToolbarButton that activates/deactivates this submodule.  "},{"title":"ActiveByDefault​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#ActiveByDefault","content":"This item is read only and cannot be modified. Read Only since v0.1.0 &lt;/&gt; PluginSubModule.ActiveByDefault: boolean Whether the submodule is turned active immediately after loading.  "},{"title":"Active​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#Active","content":"This item is read only and cannot be modified. Read Only since v0.1.0 &lt;/&gt; PluginSubModule.Active: boolean Whether the plugin is currently active or not.  "},{"title":"DisplayName​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#DisplayName","content":"This item is read only and cannot be modified. Read Only since v0.1.0 &lt;/&gt; PluginSubModule.DisplayName: string The display name of the submodule. Used in places like the PluginToolbarButton for the submodule.  "},{"title":"Tooltip​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#Tooltip","content":"This item is read only and cannot be modified. Read Only since v0.1.0 &lt;/&gt; PluginSubModule.Tooltip: string A short description-like text for the submodule. Used in places like the PluginToolbarButton for the submodule.  "},{"title":"OneClickExecution​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#OneClickExecution","content":"This item is read only and cannot be modified. Read Only since v0.1.0 &lt;/&gt; PluginSubModule.OneClickExecution: boolean Whether the submodule's button should activate and then immediately deactivate the submodule - functioning like a single-click event. Both the Activate and Deactivate hooks will fire in their respective order. Useful for instances like &quot;hey I want this submodule to do something small every time I click it&quot;. PluginSubModule.ActiveByDefault means this plugin will one-shot execute its functionality immediately when the Studio starts.  "},{"title":"DevelopmentModule​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#DevelopmentModule","content":"This item is read only and cannot be modified. Read Only since v0.1.0 &lt;/&gt; PluginSubModule.DevelopmentModule: boolean If true, then this submodule only loads when PluginFacade.DevelopmentMode is turned on. Useful for creating submodules intended entirely for testing or plugin development purposes.  "},{"title":"UID​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#UID","content":"This item is read only and cannot be modified. Read Only since v0.1.0 &lt;/&gt; PluginSubModule.UID: string A unique identifier for the submodule, meant for internal use. "},{"title":"Functions​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#functions","content":" "},{"title":"new​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#new","content":"constructor since v0.1.0 &lt;/&gt; PluginSubModule.new(config: PluginSubModuleConfig) → PluginSubModule Creates a new PluginSubModule.  "},{"title":"OnPreLoad​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#OnPreLoad","content":"methods since v0.1.0 &lt;/&gt; PluginSubModule:OnPreLoad(executor: PreLoadExecutor) → () Register a function that runs before the submodule is about to load. Its returnvalue's truthyness is used to decide if the submodule should continue to load. If it does not load, then no other lifecycle methods run. This is the best place to do permission checks or other contextual checks against whether the rest of the module should run.  "},{"title":"OnPostLoad​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#OnPostLoad","content":"methods since v0.1.0 &lt;/&gt; PluginSubModule:OnPostLoad(executor: LifeCycleExecutor) → () Register a function that runs after the submodule has loaded. It is best to do any actual initialisation code in here. Declaring buttons, context actions, mounting UIs, etc.  "},{"title":"OnActivate​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#OnActivate","content":"methods since v0.1.0 &lt;/&gt; PluginSubModule:OnActivate(executor: LifeCycleExecutor) → () Register a function that runs after the submodule has been &quot;activated&quot;. PluginSubModule.Active will be true at this point in time. It is best to start executing the module's main functionality from here, whatever it may be. Opening up widget UIs, running primary processing code, etc.  "},{"title":"OnDeactivate​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#OnDeactivate","content":"methods since v0.1.0 &lt;/&gt; PluginSubModule:OnDeactivate(executor: LifeCycleExecutor) → () Register a function that runs after the submodule has been &quot;deactivated&quot;. PluginSubModule.Active will be false at this point in time. It is best to pause/stop executing the module's main functionlity from here, whatever it may be. Closing widget UIs, pausing or stopping primary processing code, etc.  "},{"title":"OnPreUnload​","type":1,"pageTitle":"PluginSubModule","url":"/plugins/api/PluginSubModule#OnPreUnload","content":"methods since v0.1.0 &lt;/&gt; PluginSubModule:OnPreUnload(executor: LifeCycleExecutor) → () Register a function that runs before the submodule is about to unload. This has no practical usage in most production use-cases, since this hook is only invoked when the entire plugin's modules are unloaded and the plugin's execution is stopped. In other words, whenever you are live testing it with Config.DevelopmentMode turned on (hot reloading) or when the end-user deactivates the plugin from the menu "},{"title":"Development Rules","type":0,"sectionRef":"#","url":"/plugins/docs/Guides/for-developers/development-rules","content":"Development Rules If you are developing tools for the plugin, then when writing code, you must adhere to the following rules for things to work properly: Whenever require-ing any modules, ensure that the requires are absolute, otherwise PluginFacade.HotReloadPlugin() not work (for that file anyway).","keywords":""},{"title":"Component Visualiser","type":0,"sectionRef":"#","url":"/plugins/docs/Guides/for-plugin-users/component-visualiser","content":"","keywords":""},{"title":"NamedArea Visualisation​","type":1,"pageTitle":"Component Visualiser","url":"/plugins/docs/Guides/for-plugin-users/component-visualiser#namedarea-visualisation","content":"Locks/unlocks, hides/shows WorldRegions with NamedArea tags a bright red colour to make it easier to work with setting up the zones. Simply click the button each time you want to toggle the visualisation. By default, when you log into a Studio, it'll hide all the visualisations. tip You can key-bind the toggle (to something useful like ALT+V) using the Studio Shortcut manager! Very easy to toggle visualisations on/off on the fly. "},{"title":"Archive Validator","type":0,"sectionRef":"#","url":"/plugins/docs/Guides/for-plugin-users/archive-validator","content":"","keywords":""},{"title":"Choosing What Archives to Validate​","type":1,"pageTitle":"Archive Validator","url":"/plugins/docs/Guides/for-plugin-users/archive-validator#choosing-what-archives-to-validate","content":"The plugin will look for archives to validate in 2 places: Your selection, based on the following rules: Whatever you select must be a Folder.You must only have 1 item in your selection. Looking for a Folder down the following path: ServerStorage &gt; MainLibrary &gt; MainModule &gt; LibraryContent Note that MainLibrary and LibraryContent must both be FoldersAnd MainModule must be a ModuleScript. Whether it is a package or not is irrelevant. "},{"title":"Viewing Validation Results​","type":1,"pageTitle":"Archive Validator","url":"/plugins/docs/Guides/for-plugin-users/archive-validator#viewing-validation-results","content":"Results will show up in the Output tab. You can enable it through View &gt; Output at the top ribbon in ROBLOX Studio. Any other errors or communication from the validator will also go into Output. "},{"title":"Examples​","type":1,"pageTitle":"Archive Validator","url":"/plugins/docs/Guides/for-plugin-users/archive-validator#examples","content":"Here's an example of an unsuccessful validation with 11 problems relating to duplication. Notice how one of the problems has [CRIT] marking it as a critical problem to solve (a category cannot exist with no entries!). And here's an example of a successful validation after all problems have been fixed: "},{"title":"SubModuleManager","type":0,"sectionRef":"#","url":"/plugins/api/SubModuleManager","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#types","content":" "},{"title":"ModuleScriptCollection​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#ModuleScriptCollection","content":"&lt;/&gt; type ModuleScriptCollection = {ModuleScript } Simply an array of ModuleScript objects.  "},{"title":"SubModuleCollection​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#SubModuleCollection","content":"&lt;/&gt; type SubModuleCollection = {PluginSubModule} Simply an array of PluginSubModules.  "},{"title":"LoadSuccess​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#LoadSuccess","content":"&lt;/&gt; interface LoadSuccess { Ok: true-- Whether the load was successful. ModuleScript: ModuleScript -- The module instance that was loaded. Module: PluginSubModule-- The returned module after a successful load. } An object representing a successful module load.  "},{"title":"LoadFailure​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#LoadFailure","content":"&lt;/&gt; interface LoadFailure { Ok: false-- Whether the load was successful. ModuleScript: ModuleScript -- The module instance that was loaded. FailureReason: string-- A description of why the load failed. } An object representing an unsuccessful module load.  "},{"title":"LoadResult​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#LoadResult","content":"&lt;/&gt; type LoadResult = LoadSuccess | LoadFailure Indicating a generic load result - could be a success or a failure.  "},{"title":"ManagedModule​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#ManagedModule","content":"&lt;/&gt; interface ManagedModule { Module: PluginSubModule-- The submodule that is being managed. ShouldLoad: boolean-- A flag indicating whether the module should and has actually been loaded. NotLoadingReason: string?-- A written explanation that is outputted whenever the submodule is invoked, but it is not loaded. ToolbarButton: PluginToolbarButton -- The button associated with this submodule. } This is an common interfacing data structure that holds all relevant management and loading data about a given submodule. It is very useful to pass around the various management methods since each of its data are needed in their own contexts. "},{"title":"Functions​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#functions","content":" "},{"title":"new​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#new","content":"constructor since v0.1.0 &lt;/&gt; SubModuleManager.new(facade: PluginFacade.PluginFacade) → SubModuleManager Constructs a new SubModuleManager.  "},{"title":"ValidPluginSubModule​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#ValidPluginSubModule","content":"utility since v0.1.0 &lt;/&gt; SubModuleManager.ValidPluginSubModule(instance: Instance ) → boolean Validates whether an instance is likely a valid PluginSubModule. Does not require it if it is one though.  "},{"title":"CollectModules​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#CollectModules","content":"methods since v0.1.0 &lt;/&gt; SubModuleManager:CollectModules(root: Instance ) → ModuleScriptCollection Finds all ModuleScripts that could potentially return a PluginSubModule and requires them. A module identifiable by the manager is one where the name has .module at the end of it.  "},{"title":"LoadModules​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#LoadModules","content":"methods since v0.1.0 &lt;/&gt; SubModuleManager:LoadModules(moduleCollection: ModuleScriptCollection) → Promise&lt;{LoadResult}&gt;-- A promise resolving with an array of module invocation results. Loads all the module scripts inside the collection, validating them. Uses Promises internally.  "},{"title":"RunLifeCycles​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#RunLifeCycles","content":"methods since v0.1.0 &lt;/&gt; SubModuleManager:RunLifeCycles( pluginSubModules: SubModuleCollection, toolbarName: string ) → () Runs all life cycle hooks on plugin sub-modules. Creates activation buttons for all submodules too, in a toolbar with the given name.  "},{"title":"UnloadAllModules​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#UnloadAllModules","content":"methods since v0.1.0 &lt;/&gt; SubModuleManager:UnloadAllModules() → () Declares all managed modules that this manager knows about as unloaded, and calls necessary life cycle hooks on them. This should be done only once.  "},{"title":"InvokeLifeCycleHookIfExists​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#InvokeLifeCycleHookIfExists","content":"methods since v0.1.0 &lt;/&gt; SubModuleManager:InvokeLifeCycleHookIfExists( managedModule: ManagedModule, executorName: string ) → () Invokes a given life cycle executor hook on a managed module.  "},{"title":"ToggleModuleActivation​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#ToggleModuleActivation","content":"methods since v0.1.0 &lt;/&gt; SubModuleManager:ToggleModuleActivation( managedModule: ManagedModule, forcedState: boolean? ) → () Toggles a PluginSubModule.Active status whilst also validating if someone can, and calls the necessary life cycle hooks. Optionally can also force a module's activation.  "},{"title":"ToggleModuleActivationFromPlugin​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#ToggleModuleActivationFromPlugin","content":"methods since v0.3.0 &lt;/&gt; SubModuleManager:ToggleModuleActivationFromPlugin( module: PluginSubModule.PluginSubModule, forcedState: boolean? ) → () Toggles module activation but intended for use from inside a PluginSubModule. Achieves the same thing as SubModuleManager:ToggleModuleActivation.  "},{"title":"GetManagedModuleFromSubModule​","type":1,"pageTitle":"SubModuleManager","url":"/plugins/api/SubModuleManager#GetManagedModuleFromSubModule","content":"methods since v0.3.0 &lt;/&gt; SubModuleManager:GetManagedModuleFromSubModule(module: PluginSubModule.PluginSubModule) → ManagedModule? Finds the ManagedModule associated with the the given PluginSubModule. "},{"title":"Hilt Set Processor","type":0,"sectionRef":"#","url":"/plugins/docs/Guides/for-plugin-users/hilt-set-processor","content":"","keywords":""},{"title":"Importing New Hilts​","type":1,"pageTitle":"Hilt Set Processor","url":"/plugins/docs/Guides/for-plugin-users/hilt-set-processor#importing-new-hilts","content":""},{"title":"Naming​","type":1,"pageTitle":"Hilt Set Processor","url":"/plugins/docs/Guides/for-plugin-users/hilt-set-processor#naming","content":"During the process of making the lightsaber, you should name the individual models with various keywords to denote their purpose in the lightsaber. These keywords then get parsed, and decisions get made during the importing process that result in what those parts will become. There are 4 sections that all parts may fall under: The pommel - the bottom of the hilt, often just detailing or containing attachments for attaching the hilt to a belt &quot;pommel&quot;, &quot;endcap&quot;, &quot;cap&quot; The grip - the main, long section where your hand would go to hold the hilt &quot;grip&quot;, &quot;body&quot;, &quot;handle&quot;, &quot;handel&quot;, &quot;handol&quot; The switch - the buttons for configuring and igniting/extinguishing the lightsaber blade &quot;switch&quot;, &quot;switche&quot; The emitter - the top of the hilt, where the blade comes out from &quot;emitter&quot;, &quot;emiiter&quot;, &quot;emmiter&quot;, &quot;emiter&quot;, &quot;emmitur&quot;, &quot;ommiter&quot;, &quot;emiitter&quot; There is technically a 5th and 6th section, the double grip and staff sections, but they function kind of like a second and third extended grip sections, and parts with any of the following keywords will be put inside that them, respectively &quot;handle_long&quot;, &quot;long&quot;, &quot;griplong&quot;, &quot;grip_long&quot;, &quot;long_grip&quot;, &quot;handlelong&quot;, &quot;handle.long&quot;, &quot;long.handle&quot;, &quot;longhandle&quot;, &quot;longgrip&quot;, &quot;long_grip&quot;, &quot;long_handle&quot;, &quot;double_handle&quot;, &quot;double.grip&quot; &quot;staff&quot;, &quot;staf&quot;, &quot;staaf&quot;, &quot;pike&quot;, &quot;pyke&quot; tip Multiple keywords can be in the same part's name, and the names are case-insensitive! There are 4 kinds of parts that a specific hilt part may be: The root part &quot;root&quot;, &quot;roott&quot;, &quot;core&quot; Only 1 per sectionAll other details are attached to this part, per sectionOnly this part is used when calculating bounding boxes for the hilt, so details may go outside that box and not affect how the player ends up holding the hilt A primary part &quot;prim&quot;, &quot;primary&quot;, &quot;prime&quot; As many as you wantDetailing, where applying materials will also colour in this part A fixed hilt part &quot;fixed&quot;, &quot;fixt&quot;, &quot;fixet&quot;, &quot;fxed&quot;, &quot;fxd&quot; As many as you wantDetailing, but materials don't have an effect on this partTherefore useful for parts of the saber with custom textures, colours or BasePart Materials. A crystal part &quot;crystal&quot;, &quot;krystal&quot;, &quot;kyber&quot; As many as you want, but logically you'd only ever have 1Will be coloured in by the colour of the crystal the player has selectedUseful when hilts have &quot;bare crystals&quot; Here are some examples: switch_root would turn into the root part for the switchprime_body would turn into a material-influenced detail part on the gripblablah_EMiiter-Crystal-someotherwords would turn into a crystal part on the emitter (like Lord Corvax's), irrelevant to all the other words and characters in various cases present in the name - it even ignores a misspelling of the emitter. "},{"title":"Example Walk-Through​","type":1,"pageTitle":"Hilt Set Processor","url":"/plugins/docs/Guides/for-plugin-users/hilt-set-processor#example-walk-through","content":"As an example below, let us take the Tooter hilt from the 2024 April Fools update:  Here we see the MeshParts all imported and parented under a single Model called Tooter. Let's take a closer look:  Notice how they are all named with the various selections of keywords. Then, we click the Import 1 Hilt... button and the result is created 5 studs above it:  Notice the new structuring too. The Tooter hilt doesn't have a double handle so it doesn't have any actual parts go into it. "},{"title":"Previewing Materials​","type":1,"pageTitle":"Hilt Set Processor","url":"/plugins/docs/Guides/for-plugin-users/hilt-set-processor#previewing-materials","content":"Now that you've imported the lightsaber, you can preview materials on it to see how it would look in-game! Simply select the imported hilt model at the root:  "},{"title":"Configuring Hilt Parts​","type":1,"pageTitle":"Hilt Set Processor","url":"/plugins/docs/Guides/for-plugin-users/hilt-set-processor#configuring-hilt-parts","content":"If after importing, you realise some parts of the lightsaber were named incorrectly or you want to change what parts get influenced by the materials, then you can do that with configuration mode! Enable Configuration Mode from the plugin. This will remove your current selection of parts,but will select them back later when you've disabled configuration mode. Select a specific BasePart inside an imported hilt with Left Mouse Button.Select one of the context options from the context menu that pops up.Rinse and repeat until you're done making the changes you need.Turn off configuration mode by toggling the button again. Turning on:  Selecting the fixed part to configure.  Closing configuration mode and previewing a material.  Notice how that part, since it's not a primary part instead of a fixed part, is now coloured white! "},{"title":"Validating Hilts​","type":1,"pageTitle":"Hilt Set Processor","url":"/plugins/docs/Guides/for-plugin-users/hilt-set-processor#validating-hilts","content":"Once you are done with importing/configuring a hilt, you may wish to validate it to ensure you have made no mistakes in editing it. Doing this is as simple as: Selecting the model(s) you wish to verify are correct lightsaber hilts.Pressing the &quot;Validate x Hilts&quot; button.Reading the validation results from the Output (opened from View &gt; Show &gt; Output - 2nd column 1st item). tip Failed validations are highlighted in orange in the Output tab. When they fail, they provide very verbose descriptions taken directly from the raw validation outputs. They are not the cleanest to read, but they provide the most accurate information to you in telling you what's wrong. Take your time reading them! Here we see a validation succeeding:  And here we see a validation failing:  "},{"title":"Visualisation​","type":1,"pageTitle":"Hilt Set Processor","url":"/plugins/docs/Guides/for-plugin-users/hilt-set-processor#visualisation","content":""},{"title":"Root Parts​","type":1,"pageTitle":"Hilt Set Processor","url":"/plugins/docs/Guides/for-plugin-users/hilt-set-processor#root-parts","content":"Since the root parts are the sole driving components that determine how the saber will be mounted on benches and held in hands, it is often useful to visualise the root parts exclusively. Therefore, a utility for this purpose exists:  "},{"title":"Introduction","type":0,"sectionRef":"#","url":"/plugins/docs/intro","content":"","keywords":""},{"title":"Running the Project​","type":1,"pageTitle":"Introduction","url":"/plugins/docs/intro#running-the-project","content":"Basically everything you could need to do is achieved through a Lune Module. There are 2 ways to run it: Run source .commands.sh to get a terminal function setup that runs the module with the alias plugins. E.g.: &gt; source .commands.sh &gt; plugins  Just run lune run main every time you want to use. The above is faster for repeat usages. This one is faster for one off usages. E.g.: &gt; lune run main  Inside there are self-explanatory interactive options for: Running unit testsRunning static analysisBuilding the Studio testing place and the plugin itself (optionally to your local Studio plugin folder on your computer).Automatically uploading any images the plugin uses to ROBLOX.Deploying the plugin to the Roblox Marketplace. "},{"title":"Development Workflow​","type":1,"pageTitle":"Introduction","url":"/plugins/docs/intro#development-workflow","content":"Once you have started the studio (achieved by running start build/place.rbxl) and you are ready to work, go through the following steps: Start the doc-site (if you haven't already) with docsite from source .commands.sh.Ensure Config.DevelopmentMode is turned on inside src/Config.luau so that you get hot reloading, which ensures you don't have to constantly rebuild the Studio or manually save the files as a local plugin to see changes.Start the rojo service with rojo serve place.project.json and connect to it from Studio. "},{"title":"Creating New Modules​","type":1,"pageTitle":"Introduction","url":"/plugins/docs/intro#creating-new-modules","content":"Now that you have your development environment setup and the plugin hot-reloading, you're ready to create a new module! New modules are stored inside src/PluginModules as files with the name YourSubModule.module.luau. That .module suffix is especially important since that's how the system detects that file as a possible submodule that it should try to load. Once inside, use this snippet to create all the boilerplate for the new submodule: &quot;Plugin SubModule&quot;: { &quot;prefix&quot;: [ &quot;pluginsubmodule&quot;, &quot;plugin&quot;, &quot;submodule&quot; ], &quot;body&quot;: [ &quot;--!strict&quot;, &quot;local PluginSubModule = require(script.Parent.Parent.Modules.PluginSubModule)&quot;, &quot;local PluginFacade = require(script.Parent.Parent.PluginFacade)&quot;, &quot;&quot;, &quot;local ${TM_FILENAME_BASE/.module//g} = PluginSubModule.new({&quot;, &quot;\\tButtonIcon = nil,&quot;, &quot;\\tDisplayName = \\&quot;Name\\&quot;,&quot;, &quot;\\tTooltip = \\&quot;Tooltip\\&quot;,&quot;, &quot;\\tActiveByDefault = false,&quot;, &quot;\\tOneClickExecution = false,&quot;, &quot;\\tDevelopmentModule = false,&quot;, &quot;})&quot;, &quot;&quot;, &quot;${TM_FILENAME_BASE/.module//g}:OnPreLoad(function(_pluginFacade: PluginFacade.PluginFacade)&quot;, &quot;\\treturn true&quot;, &quot;end)&quot;, &quot;&quot;, &quot;${TM_FILENAME_BASE/.module//g}:OnPostLoad(function(_pluginFacade: PluginFacade.PluginFacade)&quot;, &quot;\\treturn true&quot;, &quot;end)&quot;, &quot;&quot;, &quot;${TM_FILENAME_BASE/.module//g}:OnActivate(function(_pluginFacade: PluginFacade.PluginFacade)&quot;, &quot;\\treturn true&quot;, &quot;end)&quot;, &quot;&quot;, &quot;${TM_FILENAME_BASE/.module//g}:OnDeactivate(function(_pluginFacade: PluginFacade.PluginFacade)&quot;, &quot;\\treturn true&quot;, &quot;end)&quot;, &quot;&quot;, &quot;${TM_FILENAME_BASE/.module//g}:OnPreUnload(function(_pluginFacade: PluginFacade.PluginFacade)&quot;, &quot;\\treturn true&quot;, &quot;end)&quot;, &quot;&quot;, &quot;return ${TM_FILENAME_BASE/.module//g}&quot;, ], },  When working, make sure you pay attention to Development Rules. Thanks for working towards making the lives of TKG developers just that little bit better... plugins Creator and Architect, ShadowEngineer "},{"title":"PluginFacade","type":0,"sectionRef":"#","url":"/plugins/api/PluginFacade","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#types","content":" "},{"title":"SavedState​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#SavedState","content":"&lt;/&gt; type SavedState = any   "},{"title":"PluginFacade​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#PluginFacade","content":"&lt;/&gt; interface PluginFacade { DevelopmentMode: boolean PluginObject: Plugin CurrentRoot: Instance }  "},{"title":"Properties​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#properties","content":" "},{"title":"DevelopmentMode​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#DevelopmentMode","content":"This item is read only and cannot be modified. Read Only since v0.1.0 &lt;/&gt; PluginFacade.DevelopmentMode: boolean Whether the plugin's execution is currently in &quot;developer mode&quot;. Can be used as a flag for having debug-specific features turned on. Also a proxy for whether Hot-Reloading is turned on.  "},{"title":"PluginObject​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#PluginObject","content":"This item is read only and cannot be modified. Read Only since v0.1.0 &lt;/&gt; PluginFacade.PluginObject: Plugin  Reference to the running plugin instance, from which native ROBLOX calls can be made. Since the Plugin instance is only accessible from the top-level execution Script that ROBLOX Studio executes the plugin with, a reference to it is stored in here for when native Plugin interfaces are required in other files.  "},{"title":"CurrentRoot​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#CurrentRoot","content":"This item is read only and cannot be modified. Read Only since v0.1.0 &lt;/&gt; PluginFacade.CurrentRoot: Instance  A reference to the top-level root of the plugin, wherever it might be. ALL REQUIRES SHOULD BE DIRECTED FROM HERE "},{"title":"Functions​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#functions","content":" "},{"title":"Setup​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#Setup","content":"methods constructor since v0.1.0 &lt;/&gt; PluginFacade.Setup( self: PluginFacade, settings: PluginFacadeSetupSettings ) → () "},{"title":"Types","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade##","content":""},{"title":"​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#PluginFacadeSetupSettings","content":"interface PluginFacadeSetupSettings { DevelopmentMode: boolean-- Whether to turn on development mode. currentRoot: Instance -- The root Instance where the plugin is stored in. source: Instance -- The root Instance from which the module &quot;clones&quot; itself for hot-reloading. pluginReference: Plugin -- A reference to the Plugin object available in the plugin calling script. }  Sets up the PluginFacade module. Although not a traditional &quot;constructor&quot; that most Object Classes have in OOP, it sets up the rest of the module. warning Call this before any other methods! Otherwise, undefined or erroneous behaviour might occur.  "},{"title":"CreateToolbar​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#CreateToolbar","content":"methods since v0.1.0 &lt;/&gt; PluginFacade.CreateToolbar( self: PluginFacade, name: string ) → PluginToolbar  Hot-reload-safe wrapper for Plugin:CreateToolbar.  "},{"title":"CreateButton​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#CreateButton","content":"methods since v0.1.0 &lt;/&gt; PluginFacade.CreateButton( self: PluginFacade, toolbar: PluginToolbar , name: string, tooltip: string, icon: string, text: string? ) → PluginToolbarButton  Hot-reload-safe wrapper for PluginToolbar:CreateButton.  "},{"title":"CreateDockWidgetPluginGui​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#CreateDockWidgetPluginGui","content":"methods since v0.1.0 &lt;/&gt; PluginFacade.CreateDockWidgetPluginGui( self: PluginFacade, name: string, info: DockWidgetPluginGuiInfo ) → DockWidgetPluginGui  Hot-reload-safe wrapper around Plugin:CreateDockWidgetPluginGui.  "},{"title":"GetMouse​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#GetMouse","content":"methods since v0.1.0 &lt;/&gt; PluginFacade.GetMouse(self: PluginFacade) → PluginMouse  Hot-reload-safe wrapper around Plugin:GetMouse.  "},{"title":"CreatePluginAction​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#CreatePluginAction","content":"methods since v0.3.0 &lt;/&gt; PluginFacade.CreatePluginAction( self: PluginFacade, actionId: string, text: string, statusTip: string, iconName: string, allowBinding: boolean ) → PluginAction  Hot-reload-safe wrapper around Plugin:CreatePluginAction.  "},{"title":"CreatePluginMenu​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#CreatePluginMenu","content":"methods since v0.3.0 &lt;/&gt; PluginFacade.CreatePluginMenu( self: PluginFacade, id: string, title: string, icon: string ) → PluginMenu  Hot-reload-safe wrapper around Plugin:CreatePluginMenu.  "},{"title":"RegisterPreUnloadHook​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#RegisterPreUnloadHook","content":"methods since v0.1.0 &lt;/&gt; PluginFacade.RegisterPreUnloadHook( self: PluginFacade, callback: (...any) → ...any ) → () Sets the method to call the next time the plugin tries to hot-reload.  "},{"title":"LoadPlugin​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#LoadPlugin","content":"methods since v0.1.0 &lt;/&gt; PluginFacade.LoadPlugin( self: PluginFacade, savedState: SavedState ) → () Loads the entire plugin. warning Will fail to run if root.Plugin.Main is not a ModuleScript that returns a function.  "},{"title":"UnloadPlugin​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#UnloadPlugin","content":"methods since v0.1.0 &lt;/&gt; PluginFacade.UnloadPlugin(self: PluginFacade) → SavedState? Unloads the entire plugin.  "},{"title":"HotReloadPlugin​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#HotReloadPlugin","content":"methods since v0.1.0 &lt;/&gt; PluginFacade.HotReloadPlugin(self: PluginFacade) → () Reloads the entire plugin. Used in hot-reloading.  "},{"title":"WatchInstanceForChanges​","type":1,"pageTitle":"PluginFacade","url":"/plugins/api/PluginFacade#WatchInstanceForChanges","content":"methods since v0.1.0 &lt;/&gt; PluginFacade.WatchInstanceForChanges( self: PluginFacade, instance: Instance ) → () Watch for changes to the given instance and its children, and then hot-reload the entire plugin to reflect those changes. note Recursive. Should be called on the root instance once, and it'll watch all descendant instances. "}]